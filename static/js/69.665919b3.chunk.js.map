{"version":3,"sources":["Components/SubNavBar.js","Pages/Maths/apps/Graphs.js"],"names":["useStyle","makeStyles","theme","link","color","cursor","textDecoration","hr","height","backgroundColor","margin","SubNavBar","props","classes","className","data-v-23847e07","style","padding","separator","fontSize","aria-label","links","map","i","to","url","urlName","pageTitle","component","txtTitle","marginTop","math","require","Chart","register","registerables","useStyles","root","flexGrow","overflow","control","spacing","divGraph","display","flexWrap","justifyContent","maxWidth","maxHeight","minWidth","minHeight","divCard","inputEl","Graphs","React","useState","limitmaxX","limitminX","state","SetState","expression","setExpression","useEffect","divEl","document","getElementById","mf","MathfieldElement","value","lastElementChild","removeChild","firstChild","addEventListener","e","target","console","log","message","smartMode","virtualKeyboardMode","id","appendChild","divCHart","xArray","yArray","Array","from","length","parseInt","_","negvalues","push","sort","a","b","strEquation","split","toString","replaceAll","yval","evaluate","x","ctx","getContext","undefined","window","myLine","destroy","data","labels","datasets","label","borderColor","type","options","responsive","plugins","legend","title","text","interaction","intersect","scales","y","createGraph","name","content","http-equiv","class","container","direction","justify","alignItems","item","lg","md","sm","width","variant","onChange"],"mappings":"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","file":"static/js/69.665919b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Breadcrumbs, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    link: {\r\n        color: '#3f51b5',\r\n        cursor: 'pointer',\r\n        '& hover': {\r\n            textDecoration: 'underline'\r\n        }\r\n    },\r\n    hr: {\r\n        height: '1px',\r\n        backgroundColor: '#c5c5c5',\r\n        margin: '1.5rem 0 0 0',\r\n    }\r\n}));\r\n\r\nexport default function SubNavBar(props) {\r\n    const classes = useStyle();\r\n    return (\r\n        <section className=\"hero\" data-v-23847e07>\r\n            <div style={{ padding: '2rem 0.5rem 0rem 0.5rem' }}>\r\n                <div className=\"container\">\r\n                    <h1 style={{ margin: '0px' }} className=\"subtitle is-uppercase has-text-weight-bold\">\r\n                        <Breadcrumbs className=\"subtitle is-uppercase has-text-weight-bold\" separator={<NavigateNextIcon fontSize=\"small\" />} aria-label=\"breadcrumb\">\r\n                            {\r\n                                props.links ? props.links.map((link, i) => {\r\n                                    return <Link key={i} className={classes.link} to={link.url}>{link.urlName}</Link>\r\n                                }) : <></>\r\n                            }\r\n                            {\r\n                                props.pageTitle ? <Typography component=\"h1\" className=\"\">{props.pageTitle}</Typography>\r\n                                    : <></>\r\n                            }\r\n                        </Breadcrumbs>\r\n                    </h1>\r\n                    {props.txtTitle ? <h1 style={{ marginTop: '1rem' }} >\r\n                        {props.txtTitle}</h1> : <></>}\r\n                </div>\r\n            </div>\r\n            <hr className={classes.hr} />\r\n        </section >\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Chart, registerables } from 'chart.js';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid, Container, TextField } from '@material-ui/core';\r\nimport SubNavBar from '../../../Components/SubNavBar';\r\nimport Helmet from 'react-helmet';\r\nimport { MathfieldElement } from 'mathlive';\r\nconst math = require('mathjs');\r\nChart.register(...registerables);\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        overflow: 'hidden'\r\n    },\r\n    control: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    divGraph: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center',\r\n        maxWidth: '600px',\r\n        maxHeight: '600px',\r\n        marginTop: '5px',\r\n        minWidth: '330px',\r\n        minHeight: '330px',\r\n    },\r\n    divCard: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center',\r\n        padding: '2rem',\r\n        cursor: 'default !important',\r\n        margin: '10px !important'\r\n    },\r\n    inputEl: {\r\n        margin: theme.spacing(2)\r\n\r\n    }\r\n}));\r\n\r\nexport default function Graphs() {\r\n\r\n    const [state, SetState] = React.useState({\r\n        limitmaxX: 10,\r\n        limitminX: 0,\r\n    });\r\n\r\n    const [expression, setExpression] = React.useState(\"sin(x)(x^2)\");\r\n\r\n    const createGraph = () => {\r\n        let divCHart = document.getElementById('divChart');\r\n        try {\r\n            divCHart.style.display = \"block\";\r\n            let xArray = [];\r\n            let yArray = [];\r\n            xArray = Array.from({ length: parseInt(state.limitmaxX) + 1 }, (_, i) => i);\r\n            let negvalues = Array.from({ length: parseInt(state.limitminX) + 1 }, (_, i) => -i);\r\n            for (let i = 0; i < negvalues.length; ++i) {\r\n                xArray.push(negvalues[i]);\r\n            }\r\n            xArray.sort(function (a, b) { return (a - b) })\r\n            let strEquation = expression\r\n                .split(\"\\\\\")\r\n                .toString()\r\n                .replaceAll(',', ' ')\r\n                .replaceAll(\"\\f\", \"\")\r\n                .replaceAll('rac', '')\r\n                .replaceAll('}{', ')/(')\r\n                .replaceAll('{', '(')\r\n                .replaceAll('}', ')')\r\n                .toString()\r\n                .replaceAll('f', '');\r\n            let yval = 0;\r\n            console.log(strEquation);\r\n            for (let i = 0; i < xArray.length; ++i) {\r\n                yval = math.evaluate(strEquation, { x: xArray[i] });\r\n                yArray.push(yval);\r\n            }\r\n\r\n            let ctx = document.getElementById('myChart').getContext('2d');\r\n\r\n            if (\r\n                window.myLine !== undefined\r\n                &&\r\n                window.myLine !== null\r\n            ) {\r\n                window.myLine.destroy();\r\n            }\r\n\r\n            let data = {\r\n                labels: xArray,\r\n                // Information about the dataset\r\n                datasets: [{\r\n                    label: \"Y Axis\",\r\n                    backgroundColor: 'lightblue',\r\n                    borderColor: 'royalblue',\r\n                    data: yArray,\r\n                }]\r\n            }\r\n\r\n            window.myLine = new Chart(ctx, {\r\n                // The type of chart we want to create\r\n                type: 'line', // also try bar or other graph types\r\n                // The data for our dataset\r\n                data: data,\r\n                // Configuration options\r\n                options: {\r\n                    responsive: true,\r\n                    plugins: {\r\n                        legend: false,\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Visualize algebric equation'\r\n                        },\r\n                    },\r\n                    interaction: {\r\n                        intersect: false\r\n                    },\r\n                    scales: {\r\n                        x: {\r\n                            type: 'linear',\r\n                            display: true,\r\n                            title: {\r\n                                display: true,\r\n                                text: 'X - Axis'\r\n                            }\r\n                        },\r\n                        y: {\r\n                            display: true,\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Y - Axis'\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            })\r\n\r\n        } catch (e) {\r\n            divCHart.style.display = \"none\";\r\n        }\r\n\r\n    }\r\n    // import MathLive from 'https://unpkg.com/mathlive/dist/mathlive.min.mjs';\r\n\r\n\r\n    React.useEffect(() => {\r\n\r\n        let divEl = document.getElementById('mf');\r\n\r\n        let mf = new MathfieldElement();\r\n        mf.value = expression;\r\n\r\n        while (divEl.lastElementChild) {\r\n            divEl.removeChild(divEl.firstChild)\r\n        }\r\n        mf.addEventListener('input', (e) => {\r\n            try {\r\n                setExpression(e.target.value);\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        });\r\n\r\n        mf.smartMode = 'true';\r\n        mf.virtualKeyboardMode = 'manual';\r\n        mf.className = \"inputMathField\";\r\n        mf.id = \"inputMathField\";\r\n        mf.style.minWidth = \"243px\";\r\n\r\n        divEl.appendChild(mf);\r\n\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    React.useEffect(() => {\r\n        createGraph()\r\n        // eslint-disable-next-line\r\n    }, [expression, state.limitmaxX, state.limitminX]); // eslint-disable-line react-hooks/exhaustive-deps\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <Helmet>\r\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=0.9\" />\r\n                <title>Graphs - Visualize the equations in graphs | MathCalc</title>\r\n                <meta name=\"keywords\" content=\"Mathcalc, online graph calculator, visualize equation, visualize algebric equation\" />\r\n                <meta name=\"description\" content=\"online free graph calculator can calculate your mathematical algebric expression into the visible graph format\" />\r\n                <meta name=\"author\" content=\"Mathcalc\" />\r\n                <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"></meta>\r\n            </Helmet>\r\n            <Container maxWidth={'xl'} >\r\n\r\n                <div class=\"output\" id=\"latex\"></div>\r\n                <div class=\"output\" id=\"mathjson\"></div>\r\n\r\n                <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n                    <Grid item lg={8} md={8} sm={12}>\r\n                        <SubNavBar\r\n                            pageTitle=\"Visualize equations in graphs\"\r\n                            links={[{\r\n                                url: \"/maths/\",\r\n                                urlName: \"Mathematics\"\r\n                            }]}\r\n                            txtTitle=\"Evaluate the equation and view in the cartesian plane\"\r\n                        />\r\n                        <br />\r\n                        <div className={'div-card ' + classes.divCard}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item sm={12} md={12} lg={12}>\r\n                                    <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                        <p>y &nbsp;= &nbsp; </p>\r\n                                        <div style={{ width: '90%' }} id=\"mf\"></div>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                        <div id=\"divChart\" className={'div-card ' + classes.divCard}>\r\n                            <canvas id=\"myChart\" className={classes.divGraph} width={330} height={330}></canvas>\r\n                        </div>\r\n\r\n                        <br />\r\n                    </Grid>\r\n                    <Grid item lg={4} md={4} sm={12}>\r\n                        <div className={'div-card ' + classes.divCard}>\r\n                            <TextField id=\"limitminX\" variant=\"outlined\" className={classes.inputEl} value={state.limitminX} type={'number'}\r\n                                onChange={(e) => {\r\n                                    SetState({ ...state, limitminX: e.target.value })\r\n                                }\r\n                                }\r\n                                label={\"Minimum limit of x value\"}>\r\n                            </TextField>\r\n                            <TextField id=\"limitmaxX\" variant=\"outlined\" className={classes.inputEl} value={state.limitmaxX} type={'number'}\r\n                                onChange={(e) => {\r\n                                    SetState({ ...state, limitmaxX: e.target.value })\r\n                                }\r\n                                }\r\n                                label={\"Maximum limit of x value\"}>\r\n                            </TextField>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </div >\r\n    );\r\n}\r\n"],"sourceRoot":""}