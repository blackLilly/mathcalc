{"version":3,"sources":["../node_modules/@material-ui/icons/Settings.js","../node_modules/axios/lib/utils.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/process/browser.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/nonIterableSpread.js","../node_modules/@reacherhq/api/lib/single.js","../node_modules/axios/lib/helpers/bind.js","../node_modules/axios/lib/helpers/buildURL.js","../node_modules/axios/lib/cancel/isCancel.js","../node_modules/axios/lib/defaults.js","../node_modules/axios/lib/adapters/xhr.js","../node_modules/axios/lib/core/createError.js","../node_modules/axios/lib/core/mergeConfig.js","../node_modules/axios/lib/cancel/Cancel.js","../node_modules/debug/src/browser.js","../node_modules/@reacherhq/api/lib/index.js","../node_modules/axios/index.js","../node_modules/axios/lib/axios.js","../node_modules/axios/lib/core/Axios.js","../node_modules/axios/lib/core/InterceptorManager.js","../node_modules/axios/lib/core/dispatchRequest.js","../node_modules/axios/lib/core/transformData.js","../node_modules/axios/lib/helpers/normalizeHeaderName.js","../node_modules/axios/lib/core/settle.js","../node_modules/axios/lib/core/enhanceError.js","../node_modules/axios/lib/helpers/cookies.js","../node_modules/axios/lib/core/buildFullPath.js","../node_modules/axios/lib/helpers/isAbsoluteURL.js","../node_modules/axios/lib/helpers/combineURLs.js","../node_modules/axios/lib/helpers/parseHeaders.js","../node_modules/axios/lib/helpers/isURLSameOrigin.js","../node_modules/axios/lib/cancel/CancelToken.js","../node_modules/axios/lib/helpers/spread.js","../node_modules/axios/lib/helpers/isAxiosError.js","../node_modules/debug/src/common.js","../node_modules/ms/index.js","../node_modules/@reacherhq/api/lib/batch.js","../node_modules/async/dist/async.mjs","../node_modules/@material-ui/lab/esm/Skeleton/Skeleton.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","React","_default","createElement","d","bind","toString","prototype","isArray","val","call","isUndefined","isObject","isPlainObject","getPrototypeOf","isFunction","forEach","obj","fn","i","l","length","key","hasOwnProperty","module","isArrayBuffer","isBuffer","constructor","isFormData","FormData","isArrayBufferView","ArrayBuffer","isView","buffer","isString","isNumber","isDate","isFile","isBlob","isStream","pipe","isURLSearchParams","URLSearchParams","isStandardBrowserEnv","navigator","product","window","document","merge","result","assignValue","slice","arguments","extend","a","b","thisArg","trim","str","replace","stripBOM","content","charCodeAt","_toConsumableArray","arr","Array","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","_createClass","protoProps","staticProps","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","this","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","push","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","arr2","arrayWithoutHoles","iterableToArray","nonIterableSpread","o","minLen","n","test","__assign","assign","t","s","p","__importDefault","mod","__esModule","checkSingle","axios_1","debug","input","options","_a","to_email","backendUrl","REACHER_BACKEND_URL","apiVersion","headers","axios","apiToken","Authorization","post","then","data","is_reachable","err","utils","encode","encodeURIComponent","url","params","paramsSerializer","serializedParams","parts","v","toISOString","JSON","stringify","join","hashmarkIndex","indexOf","__CANCEL__","normalizeHeaderName","DEFAULT_CONTENT_TYPE","setContentTypeIfUnset","defaults","adapter","XMLHttpRequest","getDefaultAdapter","transformRequest","transformResponse","parse","xsrfCookieName","xsrfHeaderName","maxContentLength","maxBodyLength","validateStatus","status","common","method","settle","cookies","buildURL","buildFullPath","parseHeaders","isURLSameOrigin","createError","config","Promise","resolve","reject","requestData","requestHeaders","request","auth","username","password","unescape","btoa","fullPath","baseURL","open","toUpperCase","onreadystatechange","readyState","responseURL","responseHeaders","getAllResponseHeaders","response","responseType","responseText","statusText","onabort","onerror","ontimeout","timeoutErrorMessage","xsrfValue","withCredentials","read","undefined","toLowerCase","setRequestHeader","onDownloadProgress","addEventListener","onUploadProgress","upload","cancelToken","promise","cancel","abort","send","enhanceError","message","code","error","config1","config2","valueFromConfig2Keys","mergeDeepPropertiesKeys","defaultToConfig2Keys","directMergeKeys","getMergedValue","source","mergeDeepProperties","prop","axiosKeys","otherKeys","keys","filter","Cancel","formatArgs","useColors","namespace","humanize","diff","c","color","splice","index","lastC","match","save","namespaces","storage","setItem","removeItem","load","r","getItem","DEBUG","type","__nwjs","userAgent","documentElement","style","WebkitAppearance","console","firebug","exception","table","parseInt","RegExp","$1","localStorage","localstorage","destroy","warned","warn","colors","log","formatters","j","__createBinding","create","m","k","k2","get","__exportStar","Axios","mergeConfig","createInstance","defaultConfig","context","instanceConfig","CancelToken","isCancel","all","promises","spread","isAxiosError","InterceptorManager","dispatchRequest","interceptors","chain","interceptor","unshift","fulfilled","rejected","shift","getUri","handlers","use","eject","id","h","transformData","throwIfCancellationRequested","throwIfRequested","reason","fns","normalizedName","toJSON","description","number","fileName","lineNumber","columnNumber","stack","write","expires","path","domain","secure","cookie","Date","toGMTString","decodeURIComponent","remove","now","isAbsoluteURL","combineURLs","requestedURL","relativeURL","ignoreDuplicateOf","parsed","split","line","substr","originURL","msie","urlParsingNode","resolveURL","href","setAttribute","protocol","host","search","hash","hostname","port","pathname","charAt","location","requestURL","executor","resolvePromise","token","callback","payload","createDebug","prevTime","enableOverride","enabled","self","curr","Number","ms","prev","coerce","format","formatter","logFn","selectColor","set","init","delimiter","newDebug","toNamespace","regexp","substring","disable","names","map","skips","enable","Math","abs","w","y","plural","msAbs","isPlural","round","String","exec","parseFloat","isFinite","long","fmtLong","fmtShort","batchQueue","async_1","debug_1","single_1","task","output","onSuccessSingle","concurrency","callArgs","initialParams","pop","hasSetImmediate","setImmediate","hasNextTick","fallback","wrap","defer","setImmediate$1","asyncify","func","isAsync","handlePromise","invokeCallback","toStringTag","wrapAsync","asyncFn","awaitify","arity","awaitable","cbArgs","applyEach","eachfn","go","that","cb","_asyncMap","iteratee","results","counter","_iteratee","_","iterCb","isArrayLike","breakLoop","wrapper","callFn","createIterator","coll","createArrayIterator","getIterator","item","next","done","createES2015Iterator","okeys","createObjectIterator","onlyOnce","asyncEachOfLimit","generator","limit","canceled","awaiting","running","idx","replenish","iterDone","iterateeCallback","catch","handleError","eachOfLimit","RangeError","asyncIterator","isAsyncIterable","nextElem","looping","elem","eachOfLimit$2","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf$1","map$1","applyEach$1","eachOfSeries$1","mapSeries$1","applyEachSeries","PROMISE_SYMBOL","promiseCallback","res","rej","auto","tasks","numTasks","runningTasks","hasError","readyTasks","readyToCheck","uncheckedDependencies","enqueueTask","taskCallback","safeResults","rkey","taskComplete","taskFn","runTask","processQueue","taskName","getDependents","dependencies","remainingDependencies","dependencyName","taskListeners","currentTask","dependent","checkForDeadlocks","FN_ARGS","ARROW_FN_ARGS","FN_ARG_SPLIT","FN_ARG","STRIP_COMMENTS","autoInject","newTasks","fnIsAsync","hasNoDeps","newTask","src","arg","parseParams","taskCb","newArgs","DLL","head","tail","node","newNode","insertBefore","setInitial","insertAfter","removeLink","cur","testFn","dll","worker","_worker","numRunning","workersList","events","drain","saturated","unsaturated","empty","event","handler","ev","trigger","processingScheduled","_insert","insertAtFront","rejectOnError","q","started","_tasks","_createCB","idle","_maybeDrain","eventMethod","handleAndRemove","isProcessing","datum","paused","min","defineProperties","cargo","cargo$1","reduce$1","memo","x","seq","functions","_functions","newargs","nextargs","compose","reverse","mapLimit$1","concatLimit$1","mapResults","concat$1","concatSeries$1","constant","ignoredArgs","_createTester","check","getResult","testResult","testPassed","detect$1","bool","detectLimit$1","detectSeries$1","consoleFunc","resultArgs","doWhilst$1","_fn","_test","truth","doUntil","_withoutIndex","each","eachLimit$2","eachSeries$1","ensureAsync","sync","innerArgs","every$1","everyLimit$1","everySeries$1","filterArray","truthValues","filterGeneric","sort","_filter","filter$1","filterLimit$1","filterSeries$1","forever$1","errback","groupByLimit$1","groupBy","groupBySeries","mapValuesLimit$1","newObj","mapValues","mapValuesSeries","memoize","hasher","queues","memoized","unmemoized","_parallel","parallel","parallelLimit","queue$1","items","Heap","heap","pushCount","MIN_SAFE_INTEGER","smaller","parent","percUp","top","percDown","priority","priorityQueue","race$1","reduceRight","reversed","reflect","reflectCallback","retVal","reflectAll","reject$2","rejectLimit$1","rejectSeries$1","constant$1","retry","opts","times","intervalFunc","parseTimes","_task","attempt","retryAttempt","errorFilter","acc","interval","retryable","series","some$1","Boolean","someLimit$1","someSeries$1","sortBy$1","criteria","comparator","left","right","milliseconds","info","timer","timedOut","timesLimit","count","size","range","timesSeries","transform","accumulator","tryEach$1","unmemoize","whilst$1","rest","until","waterfall$1","taskIndex","nextTask","cargoQueue","concatLimit","concatSeries","detect","detectLimit","detectSeries","doWhilst","eachLimit","eachOf","eachOfSeries","eachSeries","every","everyLimit","everySeries","filterLimit","filterSeries","forever","groupByLimit","mapLimit","mapSeries","mapValuesLimit","race","reduce","rejectLimit","rejectSeries","some","someLimit","someSeries","sortBy","tryEach","waterfall","whilst","allLimit","allSeries","any","anyLimit","anySeries","find","findLimit","findSeries","flatMap","flatMapLimit","flatMapSeries","forEachSeries","forEachLimit","forEachOf","forEachOfSeries","forEachOfLimit","inject","foldl","foldr","select","selectLimit","selectSeries","wrapSync","during","doDuring","Skeleton","ref","_props$animation","animation","classes","className","_props$component","component","Component","height","_props$variant","variant","width","other","_objectWithoutProperties","hasChildren","children","_extends","clsx","root","withChildren","fitContent","heightAuto","withStyles","theme","display","backgroundColor","fade","palette","text","primary","marginTop","marginBottom","transformOrigin","borderRadius","shape","rect","circle","pulse","opacity","wave","position","overflow","background","action","hover","bottom","visibility","maxWidth"],"mappings":"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","file":"static/js/8.6a0911e8.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z\"\n}), 'Settings');\n\nexports.default = _default;","'use strict';\n\nvar bind = require('./helpers/bind');\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (toString.call(val) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM\n};\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nexports.__esModule = true;\nexports.checkSingle = void 0;\nvar axios_1 = __importDefault(require(\"axios\"));\nvar debug_1 = require(\"debug\");\nvar l = debug_1.debug('reacher:single');\n/**\n * Reacher's backend base URL, without the version number\n */\nvar REACHER_BACKEND_URL = \"https://ssfy.sh/amaurymartiny/reacher\";\nvar REACHER_LASTEST_VERSION = '0.1.6';\n/**\n * Perform an email verification on the input email address.\n *\n * @param input - An object holding the email to be verified, as well as some\n * other configuration parameters to be used during the verification.\n * @param options - Additional options for making the API call.\n */\nfunction checkSingle(input, options) {\n    var _a;\n    if (options === void 0) { options = {}; }\n    l('Processing email %s', input.to_email);\n    var backendUrl = options.backendUrl ||\n        REACHER_BACKEND_URL + \"@\" + (options.apiVersion || REACHER_LASTEST_VERSION) + \"/check_email\";\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    var headers = __assign({ 'Content-Type': 'application/json' }, (_a = options.axios) === null || _a === void 0 ? void 0 : _a.headers);\n    if (options.apiToken) {\n        headers.Authorization = options.apiToken;\n    }\n    return axios_1[\"default\"]\n        .post(backendUrl, input, __assign(__assign({}, options.axios), { \n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        headers: headers }))\n        .then(function (_a) {\n        var data = _a.data;\n        l('Got result for %s: %s', input.to_email, data.is_reachable);\n        return data;\n    })[\"catch\"](function (err) {\n        l('Got error for %s: %s', input.to_email, err);\n        throw err;\n    });\n}\nexports.checkSingle = checkSingle;\n","'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n","'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n","'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar cookies = require('./../helpers/cookies');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n","'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n","'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  var valueFromConfig2Keys = ['url', 'method', 'data'];\n  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];\n  var defaultToConfig2Keys = [\n    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',\n    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',\n    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',\n    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',\n    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'\n  ];\n  var directMergeKeys = ['validateStatus'];\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(undefined, config2[prop]);\n    }\n  });\n\n  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);\n\n  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  });\n\n  utils.forEach(directMergeKeys, function merge(prop) {\n    if (prop in config2) {\n      config[prop] = getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  });\n\n  var axiosKeys = valueFromConfig2Keys\n    .concat(mergeDeepPropertiesKeys)\n    .concat(defaultToConfig2Keys)\n    .concat(directMergeKeys);\n\n  var otherKeys = Object\n    .keys(config1)\n    .concat(Object.keys(config2))\n    .filter(function filterAxiosKeys(key) {\n      return axiosKeys.indexOf(key) === -1;\n    });\n\n  utils.forEach(otherKeys, mergeDeepProperties);\n\n  return config;\n};\n","'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n","/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nexports.__esModule = true;\n__exportStar(require(\"./single\"), exports);\n__exportStar(require(\"./batch\"), exports);\n","module.exports = require('./lib/axios');","'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar mergeConfig = require('./core/mergeConfig');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(mergeConfig(axios.defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\n// Expose isAxiosError\naxios.isAxiosError = require('./helpers/isAxiosError');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n","'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('../helpers/buildURL');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\nvar mergeConfig = require('./mergeConfig');\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n","'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n","'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n","'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code\n    };\n  };\n  return error;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n","'use strict';\n\nvar isAbsoluteURL = require('../helpers/isAbsoluteURL');\nvar combineURLs = require('../helpers/combineURLs');\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n","'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n","'use strict';\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nmodule.exports = function isAxiosError(payload) {\n  return (typeof payload === 'object') && (payload.isAxiosError === true);\n};\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => enableOverride === null ? createDebug.enabled(namespace) : enableOverride,\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","\"use strict\";\nexports.__esModule = true;\nexports.batchQueue = void 0;\nvar async_1 = require(\"async\");\nvar debug_1 = require(\"debug\");\nvar single_1 = require(\"./single\");\nvar l = debug_1.debug('reacher:batch');\n/**\n * Default number of concurrent API calls. 100 is a good number to use with\n * Reacher.\n */\nvar DEFAULT_CONCURRENCY = 100;\n/**\n * This function takes an array of emails, and performs batch email\n * verification on them. Under the hood, it creates a queue, with a adjustable\n * concurrency defined in the options, and drains the queue.\n *\n * @param inputs - An array of inputs for making email verifications.\n * @param options - Options to pass in to make the api call.\n *\n * @returns - Returns an API requests queue, which is an instance of\n * [QueueObject](https://caolan.github.io/async/v3/docs.html#QueueObject).\n */\nfunction batchQueue(options) {\n    if (options === void 0) { options = {}; }\n    l('Creating a batch queue.');\n    var q = async_1.queue(function (task, callback) {\n        single_1.checkSingle(task, options)\n            .then(function (output) {\n            if (options.onSuccessSingle) {\n                options.onSuccessSingle(output);\n            }\n            callback();\n        })[\"catch\"](callback);\n    }, options.concurrency || DEFAULT_CONCURRENCY);\n    return q;\n}\nexports.batchQueue = batchQueue;\n","/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nfunction apply(fn, ...args) {\n    return (...callArgs) => fn(...args,...callArgs);\n}\n\nfunction initialParams (fn) {\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        return fn.call(this, args, callback);\n    };\n}\n\n/* istanbul ignore file */\n\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n}\n\nvar _defer;\n\nif (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    if (isAsync(func)) {\n        return function (...args/*, callback*/) {\n            const callback = args.pop();\n            const promise = func.apply(this, args);\n            return handlePromise(promise, callback)\n        }\n    }\n\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback)\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        setImmediate$1(e => { throw e }, err);\n    }\n}\n\nfunction isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n}\n\nfunction isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\nfunction wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function')\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\n// conditionally promisify a function.\n// only return a promise if a callback is omitted\nfunction awaitify (asyncFn, arity = asyncFn.length) {\n    if (!arity) throw new Error('arity is undefined')\n    function awaitable (...args) {\n        if (typeof args[arity - 1] === 'function') {\n            return asyncFn.apply(this, args)\n        }\n\n        return new Promise((resolve, reject) => {\n            args[arity - 1] = (err, ...cbArgs) => {\n                if (err) return reject(err)\n                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n            };\n            asyncFn.apply(this, args);\n        })\n    }\n\n    return awaitable\n}\n\nfunction applyEach (eachfn) {\n    return function applyEach(fns, ...callArgs) {\n        const go = awaitify(function (callback) {\n            var that = this;\n            return eachfn(fns, (fn, cb) => {\n                wrapAsync(fn).apply(that, callArgs.concat(cb));\n            }, callback);\n        });\n        return go;\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n\n    return eachfn(arr, (value, _, iterCb) => {\n        var index = counter++;\n        _iteratee(value, (err, v) => {\n            results[index] = v;\n            iterCb(err);\n        });\n    }, err => {\n        callback(err, results);\n    });\n}\n\nfunction isArrayLike(value) {\n    return value &&\n        typeof value.length === 'number' &&\n        value.length >= 0 &&\n        value.length % 1 === 0;\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nconst breakLoop = {};\n\nfunction once(fn) {\n    function wrapper (...args) {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    }\n    Object.assign(wrapper, fn);\n    return wrapper\n}\n\nfunction getIterator (coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        return i < len ? {value: obj[key], key} : null;\n    };\n}\n\nfunction createIterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function (...args) {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    };\n}\n\n// for async generators\nfunction asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n\n    function replenish() {\n        //console.log('replenish')\n        if (running >= limit || awaiting || done) return\n        //console.log('replenish awaiting')\n        awaiting = true;\n        generator.next().then(({value, done: iterDone}) => {\n            //console.log('got value', value)\n            if (canceled || done) return\n            awaiting = false;\n            if (iterDone) {\n                done = true;\n                if (running <= 0) {\n                    //console.log('done nextCb')\n                    callback(null);\n                }\n                return;\n            }\n            running++;\n            iteratee(value, idx, iterateeCallback);\n            idx++;\n            replenish();\n        }).catch(handleError);\n    }\n\n    function iterateeCallback(err, result) {\n        //console.log('iterateeCallback')\n        running -= 1;\n        if (canceled) return\n        if (err) return handleError(err)\n\n        if (err === false) {\n            done = true;\n            canceled = true;\n            return\n        }\n\n        if (result === breakLoop || (done && running <= 0)) {\n            done = true;\n            //console.log('done iterCb')\n            return callback(null);\n        }\n        replenish();\n    }\n\n    function handleError(err) {\n        if (canceled) return\n        awaiting = false;\n        done = true;\n        callback(err);\n    }\n\n    replenish();\n}\n\nvar eachOfLimit = (limit) => {\n    return (obj, iteratee, callback) => {\n        callback = once(callback);\n        if (limit <= 0) {\n            throw new RangeError('concurrency limit cannot be less than 1')\n        }\n        if (!obj) {\n            return callback(null);\n        }\n        if (isAsyncGenerator(obj)) {\n            return asyncEachOfLimit(obj, limit, iteratee, callback)\n        }\n        if (isAsyncIterable(obj)) {\n            return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)\n        }\n        var nextElem = createIterator(obj);\n        var done = false;\n        var canceled = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            if (canceled) return\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            }\n            else if (err === false) {\n                done = true;\n                canceled = true;\n            }\n            else if (value === breakLoop || (done && running <= 0)) {\n                done = true;\n                return callback(null);\n            }\n            else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish () {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n};\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOfLimit$2 = awaitify(eachOfLimit$1, 4);\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback);\n    var index = 0,\n        completed = 0,\n        {length} = coll,\n        canceled = false;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err === false) {\n            canceled = true;\n        }\n        if (canceled === true) return\n        if (err) {\n            callback(err);\n        } else if ((++completed === length) || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nfunction eachOfGeneric (coll, iteratee, callback) {\n    return eachOfLimit$2(coll, Infinity, iteratee, callback);\n}\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\n * var configs = {};\n *\n * async.forEachOf(obj, function (value, key, callback) {\n *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\n *         if (err) return callback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }, function (err) {\n *     if (err) console.error(err.message);\n *     // configs is now a map of JSON data\n *     doSomethingWith(configs);\n * });\n */\nfunction eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOf$1 = awaitify(eachOf, 3);\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callback\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\n *     // results is now an array of stats for each file\n * });\n */\nfunction map (coll, iteratee, callback) {\n    return _asyncMap(eachOf$1, coll, iteratee, callback)\n}\nvar map$1 = awaitify(map, 3);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional. The results\n * for each of the applied async functions are passed to the final callback\n * as an array.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - Returns a function that takes no args other than\n * an optional callback, that is the result of applying the `args` to each\n * of the functions.\n * @example\n *\n * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n *\n * appliedFn((err, results) => {\n *     // results[0] is the results for `enableSearch`\n *     // results[1] is the results for `updateSchema`\n * });\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n *     callback\n * );\n */\nvar applyEach$1 = applyEach(map$1);\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfSeries(coll, iteratee, callback) {\n    return eachOfLimit$2(coll, 1, iteratee, callback)\n}\nvar eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapSeries (coll, iteratee, callback) {\n    return _asyncMap(eachOfSeries$1, coll, iteratee, callback)\n}\nvar mapSeries$1 = awaitify(mapSeries, 3);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - A function, that when called, is the result of\n * appling the `args` to the list of functions.  It takes no args, other than\n * a callback.\n */\nvar applyEachSeries = applyEach(mapSeries$1);\n\nconst PROMISE_SYMBOL = Symbol('promiseCallback');\n\nfunction promiseCallback () {\n    let resolve, reject;\n    function callback (err, ...args) {\n        if (err) return reject(err)\n        resolve(args.length > 1 ? args : args[0]);\n    }\n\n    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n        resolve = res,\n        reject = rej;\n    });\n\n    return callback\n}\n\n/**\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n * @example\n *\n * async.auto({\n *     // this function will just be passed a callback\n *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\n *     showData: ['readData', function(results, cb) {\n *         // results.readData is the file's contents\n *         // ...\n *     }]\n * }, callback);\n *\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         console.log('in write_file', JSON.stringify(results));\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         console.log('in email_link', JSON.stringify(results));\n *         // once the file is written let's email a link to it...\n *         // results.write_file contains the filename returned by write_file.\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('results = ', results);\n * });\n */\nfunction auto(tasks, concurrency, callback) {\n    if (typeof concurrency !== 'number') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || promiseCallback());\n    var numTasks = Object.keys(tasks).length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var canceled = false;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    Object.keys(tasks).forEach(key => {\n        var task = tasks[key];\n        if (!Array.isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        dependencies.forEach(dependencyName => {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key +\n                    '` has a non-existent dependency `' +\n                    dependencyName + '` in ' +\n                    dependencies.join(', '));\n            }\n            addListener(dependencyName, () => {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(() => runTask(key, task));\n    }\n\n    function processQueue() {\n        if (canceled) return\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while(readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        taskListeners.forEach(fn => fn());\n        processQueue();\n    }\n\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce((err, ...result) => {\n            runningTasks--;\n            if (err === false) {\n                canceled = true;\n                return\n            }\n            if (result.length < 2) {\n                [result] = result;\n            }\n            if (err) {\n                var safeResults = {};\n                Object.keys(results).forEach(rkey => {\n                    safeResults[rkey] = results[rkey];\n                });\n                safeResults[key] = result;\n                hasError = true;\n                listeners = Object.create(null);\n                if (canceled) return\n                callback(err, safeResults);\n            } else {\n                results[key] = result;\n                taskComplete(key);\n            }\n        });\n\n        runningTasks++;\n        var taskFn = wrapAsync(task[task.length - 1]);\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            getDependents(currentTask).forEach(dependent => {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error(\n                'async.auto cannot execute tasks due to a recursive dependency'\n            );\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        Object.keys(tasks).forEach(key => {\n            const task = tasks[key];\n            if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n\n    return callback[PROMISE_SYMBOL]\n}\n\nvar FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\nvar ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\nfunction parseParams(func) {\n    const src = func.toString().replace(STRIP_COMMENTS, '');\n    let match = src.match(FN_ARGS);\n    if (!match) {\n        match = src.match(ARROW_FN_ARGS);\n    }\n    if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src)\n    let [, args] = match;\n    return args\n        .replace(/\\s/g, '')\n        .split(FN_ARG_SPLIT)\n        .map((arg) => arg.replace(FN_ARG, '').trim());\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    Object.keys(tasks).forEach(key => {\n        var taskFn = tasks[key];\n        var params;\n        var fnIsAsync = isAsync(taskFn);\n        var hasNoDeps =\n            (!fnIsAsync && taskFn.length === 1) ||\n            (fnIsAsync && taskFn.length === 0);\n\n        if (Array.isArray(taskFn)) {\n            params = [...taskFn];\n            taskFn = params.pop();\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (hasNoDeps) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            // remove callback param\n            if (!fnIsAsync) params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = params.map(name => results[name]);\n            newArgs.push(taskCb);\n            wrapAsync(taskFn)(...newArgs);\n        }\n    });\n\n    return auto(newTasks, callback);\n}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;\n        else this.head = node.next;\n        if (node.next) node.next.prev = node.prev;\n        else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty () {\n        while(this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;\n        else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;\n        else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);\n        else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);\n        else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this]\n    }\n\n    *[Symbol.iterator] () {\n        var cur = this.head;\n        while (cur) {\n            yield cur.data;\n            cur = cur.next;\n        }\n    }\n\n    remove (testFn) {\n        var curr = this.head;\n        while(curr) {\n            var {next} = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new RangeError('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n        error: [],\n        drain: [],\n        saturated: [],\n        unsaturated: [],\n        empty: []\n    };\n\n    function on (event, handler) {\n        events[event].push(handler);\n    }\n\n    function once (event, handler) {\n        const handleAndRemove = (...args) => {\n            off(event, handleAndRemove);\n            handler(...args);\n        };\n        events[event].push(handleAndRemove);\n    }\n\n    function off (event, handler) {\n        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n        if (!handler) return events[event] = []\n        events[event] = events[event].filter(ev => ev !== handler);\n    }\n\n    function trigger (event, ...args) {\n        events[event].forEach(handler => handler(...args));\n    }\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n\n        var res, rej;\n        function promiseCallback (err, ...args) {\n            // we don't care about the error, let the global error handler\n            // deal with it\n            if (err) return rejectOnError ? rej(err) : res()\n            if (args.length <= 1) return res(args[0])\n            res(args);\n        }\n\n        var item = {\n            data,\n            callback: rejectOnError ?\n                promiseCallback :\n                (callback || promiseCallback)\n        };\n\n        if (insertAtFront) {\n            q._tasks.unshift(item);\n        } else {\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n\n        if (rejectOnError || !callback) {\n            return new Promise((resolve, reject) => {\n                res = resolve;\n                rej = reject;\n            })\n        }\n    }\n\n    function _createCB(tasks) {\n        return function (err, ...args) {\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = workersList.indexOf(task);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback(err, ...args);\n\n                if (err != null) {\n                    trigger('error', err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                trigger('unsaturated');\n            }\n\n            if (q.idle()) {\n                trigger('drain');\n            }\n            q.process();\n        };\n    }\n\n    function _maybeDrain(data) {\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            setImmediate$1(() => trigger('drain'));\n            return true\n        }\n        return false\n    }\n\n    const eventMethod = (name) => (handler) => {\n        if (!handler) {\n            return new Promise((resolve, reject) => {\n                once(name, (err, data) => {\n                    if (err) return reject(err)\n                    resolve(data);\n                });\n            })\n        }\n        off(name);\n        on(name, handler);\n\n    };\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        *[Symbol.iterator] () {\n            yield* q._tasks[Symbol.iterator]();\n        },\n        concurrency,\n        payload,\n        buffer: concurrency / 4,\n        started: false,\n        paused: false,\n        push (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, false, callback))\n            }\n            return _insert(data, false, false, callback);\n        },\n        pushAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, true, callback))\n            }\n            return _insert(data, false, true, callback);\n        },\n        kill () {\n            off();\n            q._tasks.empty();\n        },\n        unshift (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, false, callback))\n            }\n            return _insert(data, true, false, callback);\n        },\n        unshiftAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, true, callback))\n            }\n            return _insert(data, true, true, callback);\n        },\n        remove (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    trigger('empty');\n                }\n\n                if (numRunning === q.concurrency) {\n                    trigger('saturated');\n                }\n\n                var cb = onlyOnce(_createCB(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length () {\n            return q._tasks.length;\n        },\n        running () {\n            return numRunning;\n        },\n        workersList () {\n            return workersList;\n        },\n        idle() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause () {\n            q.paused = true;\n        },\n        resume () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    // define these as fixed properties, so people get useful errors when updating\n    Object.defineProperties(q, {\n        saturated: {\n            writable: false,\n            value: eventMethod('saturated')\n        },\n        unsaturated: {\n            writable: false,\n            value: eventMethod('unsaturated')\n        },\n        empty: {\n            writable: false,\n            value: eventMethod('empty')\n        },\n        drain: {\n            writable: false,\n            value: eventMethod('drain')\n        },\n        error: {\n            writable: false,\n            value: eventMethod('error')\n        },\n    });\n    return q;\n}\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * await cargo.push({name: 'baz'});\n * console.log('finished processing baz');\n */\nfunction cargo(worker, payload) {\n    return queue(worker, 1, payload);\n}\n\n/**\n * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n * If the all `workers` are in progress, the task is queued until one becomes available. Once\n * a `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n * the cargoQueue passes an array of tasks to multiple parallel workers.\n *\n * @name cargoQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @see [async.cargo]{@link module:ControlFLow.cargo}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargoQueue and inner queue.\n * @example\n *\n * // create a cargoQueue object with payload 2 and concurrency 2\n * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2, 2);\n *\n * // add some items\n * cargoQueue.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargoQueue.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargoQueue.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n * cargoQueue.push({name: 'boo'}, function(err) {\n *     console.log('finished processing boo');\n * });\n */\nfunction cargo$1(worker, concurrency, payload) {\n    return queue(worker, concurrency, payload);\n}\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.reduce([1,2,3], 0, function(memo, item, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         callback(null, memo + item)\n *     });\n * }, function(err, result) {\n *     // result is now equal to the last value of memo, which is 6\n * });\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback);\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfSeries$1(coll, (x, i, iterCb) => {\n        _iteratee(memo, x, (err, v) => {\n            memo = v;\n            iterCb(err);\n        });\n    }, err => callback(err, memo));\n}\nvar reduce$1 = awaitify(reduce, 4);\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(...functions) {\n    var _functions = functions.map(wrapAsync);\n    return function (...args) {\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = promiseCallback();\n        }\n\n        reduce$1(_functions, args, (newargs, fn, iterCb) => {\n            fn.apply(that, newargs.concat((err, ...nextargs) => {\n                iterCb(err, nextargs);\n            }));\n        },\n        (err, results) => cb(err, ...results));\n\n        return cb[PROMISE_SYMBOL]\n    };\n}\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * If the last argument to the composed function is not a function, a promise\n * is returned when you call it.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nfunction compose(...args) {\n    return seq(...args.reverse());\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapLimit (coll, limit, iteratee, callback) {\n    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar mapLimit$1 = awaitify(mapLimit, 4);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapLimit\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, ...args) => {\n            if (err) return iterCb(err);\n            return iterCb(err, args);\n        });\n    }, (err, mapResults) => {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = result.concat(...mapResults[i]);\n            }\n        }\n\n        return callback(err, result);\n    });\n}\nvar concatLimit$1 = awaitify(concatLimit, 4);\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. The results array will be returned in\n * the original order of `coll` passed to the `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @alias flatMap\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\n *     // files is now a list of filenames that exist in the 3 directories\n * });\n */\nfunction concat(coll, iteratee, callback) {\n    return concatLimit$1(coll, Infinity, iteratee, callback)\n}\nvar concat$1 = awaitify(concat, 3);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapSeries\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatSeries(coll, iteratee, callback) {\n    return concatLimit$1(coll, 1, iteratee, callback)\n}\nvar concatSeries$1 = awaitify(concatSeries, 3);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nfunction constant(...args) {\n    return function (...ignoredArgs/*, callback*/) {\n        var callback = ignoredArgs.pop();\n        return callback(null, ...args);\n    };\n}\n\nfunction _createTester(check, getResult) {\n    return (eachfn, arr, _iteratee, cb) => {\n        var testPassed = false;\n        var testResult;\n        const iteratee = wrapAsync(_iteratee);\n        eachfn(arr, (value, _, callback) => {\n            iteratee(value, (err, result) => {\n                if (err || err === false) return callback(err);\n\n                if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    return callback(null, breakLoop);\n                }\n                callback();\n            });\n        }, err => {\n            if (err) return cb(err);\n            cb(null, testPassed ? testResult : getResult(false));\n        });\n    };\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * async.detect(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // result now equals the first file in the list that exists\n * });\n */\nfunction detect(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)\n}\nvar detect$1 = awaitify(detect, 3);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar detectLimit$1 = awaitify(detectLimit, 4);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectSeries(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)\n}\n\nvar detectSeries$1 = awaitify(detectSeries, 3);\n\nfunction consoleFunc(name) {\n    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n        if (typeof console === 'object') {\n            if (err) {\n                if (console.error) {\n                    console.error(err);\n                }\n            } else if (console[name]) {\n                resultArgs.forEach(x => console[name](x));\n            }\n        }\n    })\n}\n\n/**\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results;\n\n    function next(err, ...args) {\n        if (err) return callback(err);\n        if (err === false) return;\n        results = args;\n        _test(...args, check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return check(null, true);\n}\n\nvar doWhilst$1 = awaitify(doWhilst, 3);\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doUntil(iteratee, test, callback) {\n    const _test = wrapAsync(test);\n    return doWhilst$1(iteratee, (...args) => {\n        const cb = args.pop();\n        _test(...args, (err, truth) => cb (err, !truth));\n    }, callback);\n}\n\nfunction _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // assuming openFiles is an array of file names and saveFile is a function\n * // to save the modified contents of that file:\n *\n * async.each(openFiles, saveFile, function(err){\n *   // if any of the saves produced an error, err would equal that error\n * });\n *\n * // assuming openFiles is an array of file names\n * async.each(openFiles, function(file, callback) {\n *\n *     // Perform operation on file here.\n *     console.log('Processing file ' + file);\n *\n *     if( file.length > 32 ) {\n *       console.log('This file name is too long');\n *       callback('File name too long');\n *     } else {\n *       // Do work to process file here\n *       console.log('File processed');\n *       callback();\n *     }\n * }, function(err) {\n *     // if any of the file processing produced an error, err would equal that error\n *     if( err ) {\n *       // One of the iterations produced an error.\n *       // All processing will now stop.\n *       console.log('A file failed to process');\n *     } else {\n *       console.log('All files have been processed successfully');\n *     }\n * });\n */\nfunction eachLimit(coll, iteratee, callback) {\n    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\nvar each = awaitify(eachLimit, 3);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\nvar eachLimit$2 = awaitify(eachLimit$1, 4);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n * in series and therefore the iteratee functions will complete in order.\n\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachSeries(coll, iteratee, callback) {\n    return eachLimit$2(coll, 1, iteratee, callback)\n}\nvar eachSeries$1 = awaitify(eachSeries, 3);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        var sync = true;\n        args.push((...innerArgs) => {\n            if (sync) {\n                setImmediate$1(() => callback(...innerArgs));\n            } else {\n                callback(...innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    };\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.every(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then every file exists\n * });\n */\nfunction every(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)\n}\nvar every$1 = awaitify(every, 3);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everyLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar everyLimit$1 = awaitify(everyLimit, 4);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everySeries(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar everySeries$1 = awaitify(everySeries, 3);\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            truthValues[index] = !!v;\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            if (err) return iterCb(err);\n            if (v) {\n                results.push({index, value: x});\n            }\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        callback(null, results\n            .sort((a, b) => a.index - b.index)\n            .map(v => v.value));\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    return filter(eachfn, coll, wrapAsync(iteratee), callback);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.filter(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of the existing files\n * });\n */\nfunction filter (coll, iteratee, callback) {\n    return _filter(eachOf$1, coll, iteratee, callback)\n}\nvar filter$1 = awaitify(filter, 3);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterLimit (coll, limit, iteratee, callback) {\n    return _filter(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar filterLimit$1 = awaitify(filterLimit, 4);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterSeries (coll, iteratee, callback) {\n    return _filter(eachOfSeries$1, coll, iteratee, callback)\n}\nvar filterSeries$1 = awaitify(filterSeries, 3);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @returns {Promise} a promise that rejects if an error occurs and an errback\n * is not passed\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        if (err === false) return;\n        task(next);\n    }\n    return next();\n}\nvar forever$1 = awaitify(forever, 2);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupByLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, key) => {\n            if (err) return iterCb(err);\n            return iterCb(err, {key, val});\n        });\n    }, (err, mapResults) => {\n        var result = {};\n        // from MDN, handle object having an `hasOwnProperty` prop\n        var {hasOwnProperty} = Object.prototype;\n\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                var {key} = mapResults[i];\n                var {val} = mapResults[i];\n\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(val);\n                } else {\n                    result[key] = [val];\n                }\n            }\n        }\n\n        return callback(err, result);\n    });\n}\n\nvar groupByLimit$1 = awaitify(groupByLimit, 4);\n\n/**\n * Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {\n *     db.findById(userId, function(err, user) {\n *         if (err) return callback(err);\n *         return callback(null, user.age);\n *     });\n * }, function(err, result) {\n *     // result is object containing the userIds grouped by age\n *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};\n * });\n */\nfunction groupBy (coll, iteratee, callback) {\n    return groupByLimit$1(coll, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupBySeries (coll, iteratee, callback) {\n    return groupByLimit$1(coll, 1, iteratee, callback)\n}\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfLimit(limit)(obj, (val, key, next) => {\n        _iteratee(val, key, (err, result) => {\n            if (err) return next(err);\n            newObj[key] = result;\n            next(err);\n        });\n    }, err => callback(err, newObj));\n}\n\nvar mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.mapValues({\n *     f1: 'file1',\n *     f2: 'file2',\n *     f3: 'file3'\n * }, function (file, key, callback) {\n *   fs.stat(file, callback);\n * }, function(err, result) {\n *     // result is now a map of stats for each file, e.g.\n *     // {\n *     //     f1: [stats for file1],\n *     //     f2: [stats for file2],\n *     //     f3: [stats for file3]\n *     // }\n * });\n */\nfunction mapValues(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesSeries(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, 1, iteratee, callback)\n}\n\n/**\n * Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * **Note: if the async function errs, the result will not be cached and\n * subsequent calls will call the wrapped function.**\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher = v => v) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams((args, callback) => {\n        var key = hasher(...args);\n        if (key in memo) {\n            setImmediate$1(() => callback(null, ...memo[key]));\n        } else if (key in queues) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            _fn(...args, (err, ...resultArgs) => {\n                // #1465 don't memoize if an error occurred\n                if (!err) {\n                    memo[key] = resultArgs;\n                }\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i](err, ...resultArgs);\n                }\n            });\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nvar _parallel = awaitify((eachfn, tasks, callback) => {\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, (task, key, taskCb) => {\n        wrapAsync(task)((err, ...result) => {\n            if (result.length < 2) {\n                [result] = result;\n            }\n            results[key] = result;\n            taskCb(err);\n        });\n    }, err => callback(err, results));\n}, 3);\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // the results array will equal ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equals to: {one: 1, two: 2}\n * });\n */\nfunction parallel(tasks, callback) {\n    return _parallel(eachOf$1, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n */\nfunction parallelLimit(tasks, limit, callback) {\n    return _parallel(eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Iterable} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n * a promise that rejects if an error occurs.\n * @property {AsyncFunction} unshirtAsync - the same as `q.unshift`, except this returns\n * a promise that rejects if an error occurs.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a function that sets a callback that is\n * called when the number of running workers hits the `concurrency` limit, and\n * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n * returns a promise for the next occurrence.\n * @property {Function} unsaturated - a function that sets a callback that is\n * called when the number of running workers is less than the `concurrency` &\n * `buffer` limits, and further tasks will not be queued. If the callback is\n * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a function that sets a callback that is called\n * when the last item from the `queue` is given to a `worker`. If the callback\n * is omitted, `q.empty()` returns a promise for the next occurrence.\n * @property {Function} drain - a function that sets a callback that is called\n * when the last item from the `queue` has returned from the `worker`. If the\n * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n * @property {Function} error - a function that sets a callback that is called\n * when a task errors. Has the signature `function(error, task)`. If the\n * callback is omitted, `error()` returns a promise that rejects on the next\n * error.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n *\n * @example\n * const q = aync.queue(worker, 2)\n * q.push(item1)\n * q.push(item2)\n * q.push(item3)\n * // queues are iterable, spread into an array to inspect\n * const items = [...q] // [item1, item2, item3]\n * // or use for of\n * for (let item of q) {\n *     console.log(item)\n * }\n *\n * q.drain(() => {\n *     console.log('all done')\n * })\n * // or\n * await q.drain()\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain(function() {\n *     console.log('all items have been processed');\n * });\n * // or await the end\n * await q.drain()\n *\n * // assign an error callback\n * q.error(function(err, task) {\n *     console.error('task experienced an error');\n * });\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * // callback is optional\n * q.push({name: 'bar'});\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nfunction queue$1 (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue((items, cb) => {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n}\n\n// Binary min-heap implementation used for priority queue.\n// Implementation is stable, i.e. push time is considered for equal priorities\nclass Heap {\n    constructor() {\n        this.heap = [];\n        this.pushCount = Number.MIN_SAFE_INTEGER;\n    }\n\n    get length() {\n        return this.heap.length;\n    }\n\n    empty () {\n        this.heap = [];\n        return this;\n    }\n\n    percUp(index) {\n        let p;\n\n        while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {\n            let t = this.heap[index];\n            this.heap[index] = this.heap[p];\n            this.heap[p] = t;\n\n            index = p;\n        }\n    }\n\n    percDown(index) {\n        let l;\n\n        while ((l=leftChi(index)) < this.heap.length) {\n            if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {\n                l = l+1;\n            }\n\n            if (smaller(this.heap[index], this.heap[l])) {\n                break;\n            }\n\n            let t = this.heap[index];\n            this.heap[index] = this.heap[l];\n            this.heap[l] = t;\n\n            index = l;\n        }\n    }\n\n    push(node) {\n        node.pushCount = ++this.pushCount;\n        this.heap.push(node);\n        this.percUp(this.heap.length-1);\n    }\n\n    unshift(node) {\n        return this.heap.push(node);\n    }\n\n    shift() {\n        let [top] = this.heap;\n\n        this.heap[0] = this.heap[this.heap.length-1];\n        this.heap.pop();\n        this.percDown(0);\n\n        return top;\n    }\n\n    toArray() {\n        return [...this];\n    }\n\n    *[Symbol.iterator] () {\n        for (let i = 0; i < this.heap.length; i++) {\n            yield this.heap[i].data;\n        }\n    }\n\n    remove (testFn) {\n        let j = 0;\n        for (let i = 0; i < this.heap.length; i++) {\n            if (!testFn(this.heap[i])) {\n                this.heap[j] = this.heap[i];\n                j++;\n            }\n        }\n\n        this.heap.splice(j);\n\n        for (let i = parent(this.heap.length-1); i >= 0; i--) {\n            this.percDown(i);\n        }\n\n        return this;\n    }\n}\n\nfunction leftChi(i) {\n    return (i<<1)+1;\n}\n\nfunction parent(i) {\n    return ((i+1)>>1)-1;\n}\n\nfunction smaller(x, y) {\n    if (x.priority !== y.priority) {\n        return x.priority < y.priority;\n    }\n    else {\n        return x.pushCount < y.pushCount;\n    }\n}\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nfunction priorityQueue(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n\n    q._tasks = new Heap();\n\n    // Override push to accept second parameter representing priority\n    q.push = function(data, priority = 0, callback = () => {}) {\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(() => q.drain());\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority,\n                callback\n            };\n\n            q._tasks.push(item);\n        }\n\n        setImmediate$1(q.process);\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n}\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        wrapAsync(tasks[i])(callback);\n    }\n}\n\nvar race$1 = awaitify(race, 2);\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction reduceRight (array, memo, iteratee, callback) {\n    var reversed = [...array].reverse();\n    return reduce$1(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push((error, ...cbArgs) => {\n            let retVal = {};\n            if (error) {\n                retVal.error = error;\n            }\n            if (cbArgs.length > 0){\n                var value = cbArgs;\n                if (cbArgs.length <= 1) {\n                    [value] = cbArgs;\n                }\n                retVal.value = value;\n            }\n            reflectCallback(null, retVal);\n        });\n\n        return _fn.apply(this, args);\n    });\n}\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (Array.isArray(tasks)) {\n        results = tasks.map(reflect);\n    } else {\n        results = {};\n        Object.keys(tasks).forEach(key => {\n            results[key] = reflect.call(this, tasks[key]);\n        });\n    }\n    return results;\n}\n\nfunction reject(eachfn, arr, _iteratee, callback) {\n    const iteratee = wrapAsync(_iteratee);\n    return _filter(eachfn, arr, (value, cb) => {\n        iteratee(value, (err, v) => {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.reject(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of missing files\n *     createFiles(results);\n * });\n */\nfunction reject$1 (coll, iteratee, callback) {\n    return reject(eachOf$1, coll, iteratee, callback)\n}\nvar reject$2 = awaitify(reject$1, 3);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectLimit (coll, limit, iteratee, callback) {\n    return reject(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar rejectLimit$1 = awaitify(rejectLimit, 4);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectSeries (coll, iteratee, callback) {\n    return reject(eachOfSeries$1, coll, iteratee, callback)\n}\nvar rejectSeries$1 = awaitify(rejectSeries, 3);\n\nfunction constant$1(value) {\n    return function () {\n        return value;\n    }\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @returns {Promise} a promise if no callback provided\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nconst DEFAULT_TIMES = 5;\nconst DEFAULT_INTERVAL = 0;\n\nfunction retry(opts, task, callback) {\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || promiseCallback();\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || promiseCallback();\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n    function retryAttempt() {\n        _task((err, ...args) => {\n            if (err === false) return\n            if (err && attempt++ < options.times &&\n                (typeof options.errorFilter != 'function' ||\n                    options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n            } else {\n                callback(err, ...args);\n            }\n        });\n    }\n\n    retryAttempt();\n    return callback[PROMISE_SYMBOL]\n}\n\nfunction parseTimes(acc, t) {\n    if (typeof t === 'object') {\n        acc.times = +t.times || DEFAULT_TIMES;\n\n        acc.intervalFunc = typeof t.interval === 'function' ?\n            t.interval :\n            constant$1(+t.interval || DEFAULT_INTERVAL);\n\n        acc.errorFilter = t.errorFilter;\n    } else if (typeof t === 'number' || typeof t === 'string') {\n        acc.times = +t || DEFAULT_TIMES;\n    } else {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nfunction retryable (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    let arity = (opts && opts.arity) || task.length;\n    if (isAsync(task)) {\n        arity += 1;\n    }\n    var _task = wrapAsync(task);\n    return initialParams((args, callback) => {\n        if (args.length < arity - 1 || callback == null) {\n            args.push(callback);\n            callback = promiseCallback();\n        }\n        function taskFn(cb) {\n            _task(...args, cb);\n        }\n\n        if (opts) retry(opts, taskFn, callback);\n        else retry(taskFn, callback);\n\n        return callback[PROMISE_SYMBOL]\n    });\n}\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @return {Promise} a promise, if no callback is passed\n * @example\n * async.series([\n *     function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     },\n *     function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // results is now equal to ['one', 'two']\n * });\n *\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback){\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equal to: {one: 1, two: 2}\n * });\n */\nfunction series(tasks, callback) {\n    return _parallel(eachOfSeries$1, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.some(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then at least one of the files exists\n * });\n */\nfunction some(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)\n}\nvar some$1 = awaitify(some, 3);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someLimit(coll, limit, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar someLimit$1 = awaitify(someLimit, 4);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someSeries(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar someSeries$1 = awaitify(someSeries, 3);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback passed\n * @example\n *\n * async.sortBy(['file1','file2','file3'], function(file, callback) {\n *     fs.stat(file, function(err, stats) {\n *         callback(err, stats.mtime);\n *     });\n * }, function(err, results) {\n *     // results is now the original array of files sorted by\n *     // modified date\n * });\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x);\n * }, function(err,result) {\n *     // result callback\n * });\n *\n * // descending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\n * }, function(err,result) {\n *     // result callback\n * });\n */\nfunction sortBy (coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return map$1(coll, (x, iterCb) => {\n        _iteratee(x, (err, criteria) => {\n            if (err) return iterCb(err);\n            iterCb(err, {value: x, criteria});\n        });\n    }, (err, results) => {\n        if (err) return callback(err);\n        callback(null, results.sort(comparator).map(v => v.value));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria, b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\nvar sortBy$1 = awaitify(sortBy, 3);\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n\n    return initialParams((args, callback) => {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push((...cbArgs) => {\n            if (!timedOut) {\n                callback(...cbArgs);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn(...args);\n    });\n}\n\nfunction range(size) {\n    var result = Array(size);\n    while (size--) {\n        result[size] = size;\n    }\n    return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(range(count), limit, _iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nfunction times (n, iteratee, callback) {\n    return timesLimit(n, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesSeries (n, iteratee, callback) {\n    return timesLimit(n, 1, iteratee, callback)\n}\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in parallel, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.transform([1,2,3], function(acc, item, index, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         acc[index] = item * 2\n *         callback(null)\n *     });\n * }, function(err, result) {\n *     // result is now equal to [2, 4, 6]\n * });\n *\n * @example\n *\n * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\n *     setImmediate(function () {\n *         obj[key] = val * 2;\n *         callback();\n *     })\n * }, function (err, result) {\n *     // result is equal to {a: 2, b: 4, c: 6}\n * })\n */\nfunction transform (coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3 && typeof accumulator === 'function') {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = Array.isArray(coll) ? [] : {};\n    }\n    callback = once(callback || promiseCallback());\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf$1(coll, (v, k, cb) => {\n        _iteratee(accumulator, v, k, cb);\n    }, err => callback(err, accumulator));\n    return callback[PROMISE_SYMBOL]\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return eachSeries$1(tasks, (task, taskCb) => {\n        wrapAsync(task)((err, ...args) => {\n            if (err === false) return taskCb(err);\n\n            if (args.length < 2) {\n                [result] = args;\n            } else {\n                result = args;\n            }\n            error = err;\n            taskCb(err ? null : {});\n        });\n    }, () => callback(error, result));\n}\n\nvar tryEach$1 = awaitify(tryEach);\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return (...args) => {\n        return (fn.unmemoized || fn)(...args);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function test(cb) { cb(null, count < 5); },\n *     function iter(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results = [];\n\n    function next(err, ...rest) {\n        if (err) return callback(err);\n        results = rest;\n        if (err === false) return;\n        _test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return _test(check);\n}\nvar whilst$1 = awaitify(whilst, 3);\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * const results = []\n * let finished = false\n * async.until(function test(page, cb) {\n *     cb(null, finished)\n * }, function iter(next) {\n *     fetchPage(url, (err, body) => {\n *         if (err) return next(err)\n *         results = results.concat(body.objects)\n *         finished = !!body.next\n *         next(err)\n *     })\n * }, function done (err) {\n *     // all pages have been fetched\n * })\n */\nfunction until(test, iteratee, callback) {\n    const _test = wrapAsync(test);\n    return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nfunction waterfall (tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = wrapAsync(tasks[taskIndex++]);\n        task(...args, onlyOnce(next));\n    }\n\n    function next(err, ...args) {\n        if (err === false) return\n        if (err || taskIndex === tasks.length) {\n            return callback(err, ...args);\n        }\n        nextTask(args);\n    }\n\n    nextTask([]);\n}\n\nvar waterfall$1 = awaitify(waterfall);\n\n/**\n * An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */\n\nvar index = {\n    apply,\n    applyEach: applyEach$1,\n    applyEachSeries,\n    asyncify,\n    auto,\n    autoInject,\n    cargo,\n    cargoQueue: cargo$1,\n    compose,\n    concat: concat$1,\n    concatLimit: concatLimit$1,\n    concatSeries: concatSeries$1,\n    constant,\n    detect: detect$1,\n    detectLimit: detectLimit$1,\n    detectSeries: detectSeries$1,\n    dir,\n    doUntil,\n    doWhilst: doWhilst$1,\n    each,\n    eachLimit: eachLimit$2,\n    eachOf: eachOf$1,\n    eachOfLimit: eachOfLimit$2,\n    eachOfSeries: eachOfSeries$1,\n    eachSeries: eachSeries$1,\n    ensureAsync,\n    every: every$1,\n    everyLimit: everyLimit$1,\n    everySeries: everySeries$1,\n    filter: filter$1,\n    filterLimit: filterLimit$1,\n    filterSeries: filterSeries$1,\n    forever: forever$1,\n    groupBy,\n    groupByLimit: groupByLimit$1,\n    groupBySeries,\n    log,\n    map: map$1,\n    mapLimit: mapLimit$1,\n    mapSeries: mapSeries$1,\n    mapValues,\n    mapValuesLimit: mapValuesLimit$1,\n    mapValuesSeries,\n    memoize,\n    nextTick,\n    parallel,\n    parallelLimit,\n    priorityQueue,\n    queue: queue$1,\n    race: race$1,\n    reduce: reduce$1,\n    reduceRight,\n    reflect,\n    reflectAll,\n    reject: reject$2,\n    rejectLimit: rejectLimit$1,\n    rejectSeries: rejectSeries$1,\n    retry,\n    retryable,\n    seq,\n    series,\n    setImmediate: setImmediate$1,\n    some: some$1,\n    someLimit: someLimit$1,\n    someSeries: someSeries$1,\n    sortBy: sortBy$1,\n    timeout,\n    times,\n    timesLimit,\n    timesSeries,\n    transform,\n    tryEach: tryEach$1,\n    unmemoize,\n    until,\n    waterfall: waterfall$1,\n    whilst: whilst$1,\n\n    // aliases\n    all: every$1,\n    allLimit: everyLimit$1,\n    allSeries: everySeries$1,\n    any: some$1,\n    anyLimit: someLimit$1,\n    anySeries: someSeries$1,\n    find: detect$1,\n    findLimit: detectLimit$1,\n    findSeries: detectSeries$1,\n    flatMap: concat$1,\n    flatMapLimit: concatLimit$1,\n    flatMapSeries: concatSeries$1,\n    forEach: each,\n    forEachSeries: eachSeries$1,\n    forEachLimit: eachLimit$2,\n    forEachOf: eachOf$1,\n    forEachOfSeries: eachOfSeries$1,\n    forEachOfLimit: eachOfLimit$2,\n    inject: reduce$1,\n    foldl: reduce$1,\n    foldr: reduceRight,\n    select: filter$1,\n    selectLimit: filterLimit$1,\n    selectSeries: filterSeries$1,\n    wrapSync: asyncify,\n    during: whilst$1,\n    doDuring: doWhilst$1\n};\n\nexport default index;\nexport { apply, applyEach$1 as applyEach, applyEachSeries, asyncify, auto, autoInject, cargo, cargo$1 as cargoQueue, compose, concat$1 as concat, concatLimit$1 as concatLimit, concatSeries$1 as concatSeries, constant, detect$1 as detect, detectLimit$1 as detectLimit, detectSeries$1 as detectSeries, dir, doUntil, doWhilst$1 as doWhilst, each, eachLimit$2 as eachLimit, eachOf$1 as eachOf, eachOfLimit$2 as eachOfLimit, eachOfSeries$1 as eachOfSeries, eachSeries$1 as eachSeries, ensureAsync, every$1 as every, everyLimit$1 as everyLimit, everySeries$1 as everySeries, filter$1 as filter, filterLimit$1 as filterLimit, filterSeries$1 as filterSeries, forever$1 as forever, groupBy, groupByLimit$1 as groupByLimit, groupBySeries, log, map$1 as map, mapLimit$1 as mapLimit, mapSeries$1 as mapSeries, mapValues, mapValuesLimit$1 as mapValuesLimit, mapValuesSeries, memoize, nextTick, parallel, parallelLimit, priorityQueue, queue$1 as queue, race$1 as race, reduce$1 as reduce, reduceRight, reflect, reflectAll, reject$2 as reject, rejectLimit$1 as rejectLimit, rejectSeries$1 as rejectSeries, retry, retryable, seq, series, setImmediate$1 as setImmediate, some$1 as some, someLimit$1 as someLimit, someSeries$1 as someSeries, sortBy$1 as sortBy, timeout, times, timesLimit, timesSeries, transform, tryEach$1 as tryEach, unmemoize, until, waterfall$1 as waterfall, whilst$1 as whilst, every$1 as all, everyLimit$1 as allLimit, everySeries$1 as allSeries, some$1 as any, someLimit$1 as anyLimit, someSeries$1 as anySeries, detect$1 as find, detectLimit$1 as findLimit, detectSeries$1 as findSeries, concat$1 as flatMap, concatLimit$1 as flatMapLimit, concatSeries$1 as flatMapSeries, each as forEach, eachSeries$1 as forEachSeries, eachLimit$2 as forEachLimit, eachOf$1 as forEachOf, eachOfSeries$1 as forEachOfSeries, eachOfLimit$2 as forEachOfLimit, reduce$1 as inject, reduce$1 as foldl, reduceRight as foldr, filter$1 as select, filterLimit$1 as selectLimit, filterSeries$1 as selectSeries, asyncify as wrapSync, whilst$1 as during, doWhilst$1 as doDuring };\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { fade, withStyles } from '@material-ui/core/styles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'block',\n      // Create a \"on paper\" color with sufficient contrast retaining the color\n      backgroundColor: fade(theme.palette.text.primary, theme.palette.type === 'light' ? 0.11 : 0.13),\n      height: '1.2em'\n    },\n\n    /* Styles applied to the root element if `variant=\"text\"`. */\n    text: {\n      marginTop: 0,\n      marginBottom: 0,\n      height: 'auto',\n      transformOrigin: '0 60%',\n      transform: 'scale(1, 0.60)',\n      borderRadius: theme.shape.borderRadius,\n      '&:empty:before': {\n        content: '\"\\\\00a0\"'\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"rect\"`. */\n    rect: {},\n\n    /* Styles applied to the root element if `variant=\"circle\"`. */\n    circle: {\n      borderRadius: '50%'\n    },\n\n    /* Styles applied to the root element if `animation=\"pulse\"`. */\n    pulse: {\n      animation: '$pulse 1.5s ease-in-out 0.5s infinite'\n    },\n    '@keyframes pulse': {\n      '0%': {\n        opacity: 1\n      },\n      '50%': {\n        opacity: 0.4\n      },\n      '100%': {\n        opacity: 1\n      }\n    },\n\n    /* Styles applied to the root element if `animation=\"wave\"`. */\n    wave: {\n      position: 'relative',\n      overflow: 'hidden',\n      '&::after': {\n        animation: '$wave 1.6s linear 0.5s infinite',\n        background: \"linear-gradient(90deg, transparent, \".concat(theme.palette.action.hover, \", transparent)\"),\n        content: '\"\"',\n        position: 'absolute',\n        transform: 'translateX(-100%)',\n        // Avoid flash during server-side hydration\n        bottom: 0,\n        left: 0,\n        right: 0,\n        top: 0\n      }\n    },\n    '@keyframes wave': {\n      '0%': {\n        transform: 'translateX(-100%)'\n      },\n      '60%': {\n        // +0.5s of delay between each loop\n        transform: 'translateX(100%)'\n      },\n      '100%': {\n        transform: 'translateX(100%)'\n      }\n    },\n\n    /* Styles applied when the component is passed children. */\n    withChildren: {\n      '& > *': {\n        visibility: 'hidden'\n      }\n    },\n\n    /* Styles applied when the component is passed children and no width. */\n    fitContent: {\n      maxWidth: 'fit-content'\n    },\n\n    /* Styles applied when the component is passed children and no height. */\n    heightAuto: {\n      height: 'auto'\n    }\n  };\n};\nvar Skeleton = /*#__PURE__*/React.forwardRef(function Skeleton(props, ref) {\n  var _props$animation = props.animation,\n      animation = _props$animation === void 0 ? 'pulse' : _props$animation,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'span' : _props$component,\n      height = props.height,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'text' : _props$variant,\n      width = props.width,\n      other = _objectWithoutProperties(props, [\"animation\", \"classes\", \"className\", \"component\", \"height\", \"variant\", \"width\"]);\n\n  var hasChildren = Boolean(other.children);\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    className: clsx(classes.root, classes[variant], className, hasChildren && [classes.withChildren, !width && classes.fitContent, !height && classes.heightAuto], animation !== false && classes[animation])\n  }, other, {\n    style: _extends({\n      width: width,\n      height: height\n    }, other.style)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Skeleton.propTypes = {\n  /**\n   * The animation.\n   * If `false` the animation effect is disabled.\n   */\n  animation: PropTypes.oneOf(['pulse', 'wave', false]),\n\n  /**\n   * Optional children to infer width and height from.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Height of the skeleton.\n   * Useful when you don't want to adapt the skeleton to a text element but for instance a card.\n   */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * The type of content that will be rendered.\n   */\n  variant: PropTypes.oneOf(['text', 'rect', 'circle']),\n\n  /**\n   * Width of the skeleton.\n   * Useful when the skeleton is inside an inline element with no width of its own.\n   */\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiSkeleton'\n})(Skeleton);"],"sourceRoot":""}