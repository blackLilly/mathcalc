{"version":3,"sources":["Components/SubNavBar.js","Pages/Text/apps/Addtexteachline.js"],"names":["useStyle","makeStyles","theme","link","color","cursor","textDecoration","hr","height","backgroundColor","margin","SubNavBar","props","classes","className","style","padding","separator","fontSize","links","map","i","to","url","urlName","pageTitle","component","txtTitle","marginTop","useStyles","root","flexGrow","overflow","divcalc","borderRadius","formelems","row","imgcenter","marginLeft","backdrop","zIndex","drawer","Addtexttoeachline","React","useState","result","inputText","isBegin","isEnd","txtBegin","txtEnd","isAddLeadingzero","state","setState","snakOpen","setSnakOpen","snakMessage","setSnakMessage","onInputChange","e","target","id","value","onChangeLeadingZero","onCheckboxChange","name","checked","backDropopen","SetBackDropopen","open","msg","handleClose","content","property","maxWidth","elevation","variant","type","maxLength","resize","minWidth","minHeight","marginBottom","onChange","startIcon","onClick","originalArr","trim","split","resultText","trailingzero","lengthofZeroes","length","toString","j","continuenum","parseFloat","slice","replaceAll","setTimeout","resultDiv","document","getElementsByClassName","copyInput","getElementById","select","setSelectionRange","execCommand","strFile","blob","Blob","fileSave","control","label","placeholder"],"mappings":"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","file":"static/js/88.deaf1dc4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Breadcrumbs, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    link: {\r\n        color: '#3f51b5',\r\n        cursor: 'pointer',\r\n        '& hover': {\r\n            textDecoration: 'underline'\r\n        }\r\n    },\r\n    hr: {\r\n        height: '1px',\r\n        backgroundColor: '#c5c5c5',\r\n        margin: '1.5rem 0 0 0',\r\n    }\r\n}));\r\n\r\nexport default function SubNavBar(props) {\r\n    const classes = useStyle();\r\n    return (\r\n        <section className=\"hero\" data-v-23847e07>\r\n            <div style={{ padding: '2rem 0.5rem 0rem 0.5rem' }}>\r\n                <div className=\"container\">\r\n                    <h1 style={{ margin: '0px' }} className=\"subtitle is-uppercase has-text-weight-bold\">\r\n                        <Breadcrumbs className=\"subtitle is-uppercase has-text-weight-bold\" separator={<NavigateNextIcon fontSize=\"small\" />} aria-label=\"breadcrumb\">\r\n                            {\r\n                                props.links ? props.links.map((link, i) => {\r\n                                    return <Link key={i} className={classes.link} to={link.url}>{link.urlName}</Link>\r\n                                }) : <></>\r\n                            }\r\n                            {\r\n                                props.pageTitle ? <Typography component=\"h1\" className=\"\">{props.pageTitle}</Typography>\r\n                                    : <></>\r\n                            }\r\n                        </Breadcrumbs>\r\n                    </h1>\r\n                    {props.txtTitle ? <h1 style={{ marginTop: '1rem' }} >\r\n                        {props.txtTitle}</h1> : <></>}\r\n                </div>\r\n            </div>\r\n            <hr className={classes.hr} />\r\n        </section >\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Button, Typography, ButtonGroup, FormControlLabel, Checkbox,\r\n    Backdrop, CircularProgress, FormControl, Card, Container\r\n} from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SettingIcon from '@material-ui/icons/Settings';\r\nimport FontDownloadIcon from '@material-ui/icons/GetApp';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport Helmet from 'react-helmet';\r\nimport CustomSnakbar from '../../../Components/CustomSnakbar';\r\nimport SubNavBar from '../../../Components/SubNavBar';\r\nimport * as fileSave from \"file-saver\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        overflow: 'hidden'\r\n    },\r\n    divcalc: {\r\n        borderRadius: '12px',\r\n        padding: '1em',\r\n        color: '#314259'\r\n    },\r\n    formelems: {\r\n        '& > *': {\r\n            margin: '10px 0px 10px 0px',\r\n        },\r\n    },\r\n    row: {\r\n        margin: '10px'\r\n    },\r\n    imgcenter: {\r\n        marginLeft: '55px',\r\n    },\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n}));\r\n\r\nexport default function Addtexttoeachline() {\r\n    const [state, setState] = React.useState({\r\n        result: '',\r\n        inputText: '',\r\n        isBegin: false,\r\n        isEnd: false,\r\n        txtBegin: '',\r\n        txtEnd: '',\r\n        isAddLeadingzero: false,\r\n    })\r\n\r\n    const [snakOpen, setSnakOpen] = React.useState(null);\r\n    const [snakMessage, setSnakMessage] = React.useState(null);\r\n    const onClickCalculate = () => {\r\n\r\n        let OriginalText = state.inputText === '' ? '' : state.inputText.trim();\r\n\r\n        let originalArr = OriginalText.split('\\n');\r\n\r\n        let resultText = \"\";\r\n\r\n        let trailingzero = '';\r\n        let lengthofZeroes = originalArr.length.toString().length;\r\n        for (let j = 1; j < lengthofZeroes; ++j) {\r\n            trailingzero += '0';\r\n        }\r\n        let continuenum = 0;\r\n\r\n        if (state.isAddLeadingzero) {\r\n            for (let i = 0; i < originalArr.length; i++) {\r\n                continuenum = parseFloat(continuenum + 1);\r\n                trailingzero = trailingzero.slice(0, lengthofZeroes - continuenum.toString().length);\r\n\r\n                resultText += (state.txtBegin + originalArr[i] + state.txtEnd + \" \\n\").toString().replaceAll(\"%N%\", (trailingzero + (1 + i))).toString().replaceAll(\"%L%\", originalArr[i]);\r\n            }\r\n        } else {\r\n            for (let i = 0; i < originalArr.length; i++) {\r\n                resultText += (state.txtBegin + originalArr[i] + state.txtEnd + \" \\n\").toString().replaceAll(\"%N%\", (1 + i)).toString().replaceAll(\"%L%\", originalArr[i]);\r\n            }\r\n        }\r\n        setState({\r\n            ...state,\r\n            result: resultText.toString(),\r\n        });\r\n\r\n        setTimeout(() => {\r\n            SetBackDropopen(false);\r\n        }, 250);\r\n\r\n        //blink the result\r\n        let resultDiv = document.getElementsByClassName('resultsec')[0];\r\n        resultDiv.className = 'resultsec blink_me'\r\n        setTimeout(() => {\r\n            resultDiv.className = 'resultsec';\r\n        }, 1000);\r\n    }\r\n\r\n    const fncopytext = (e) => {\r\n        /* Get the text field */\r\n\r\n        let copyInput = document.getElementById('result');\r\n        /* Select the text field */\r\n        copyInput.select();\r\n        copyInput.setSelectionRange(0, 99999); /* For mobile devices */\r\n\r\n        /* Copy the text inside the text field */\r\n        document.execCommand(\"copy\");\r\n    }\r\n\r\n    const onClickDownload = () => {\r\n\r\n        let strFile = state.result;\r\n\r\n        let blob = new Blob([strFile], { type: 'text' });\r\n\r\n        fileSave.saveAs(blob, 'generated_text.txt');\r\n\r\n    }\r\n\r\n    const onInputChange = (e) => {\r\n        setState({\r\n            ...state, [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    const onChangeLeadingZero = (e) => {\r\n        setState({\r\n            ...state,\r\n            isAddLeadingzero: !state.isAddLeadingzero,\r\n        })\r\n    }\r\n\r\n    const onCheckboxChange = (e) => {\r\n\r\n        if (e.target.name === \"isEnd\") {\r\n            if (e.target.checked) {\r\n                setState({\r\n                    ...state,\r\n                    [e.target.name]: e.target.checked,\r\n                });\r\n            } else {\r\n                setState({\r\n                    ...state,\r\n                    [e.target.name]: e.target.checked,\r\n                    txtEnd: '',\r\n                });\r\n            }\r\n        } else if (e.target.name === \"isBegin\") {\r\n            if (e.target.checked) {\r\n                setState({\r\n                    ...state,\r\n                    [e.target.name]: e.target.checked,\r\n                });\r\n            } else {\r\n                setState({\r\n                    ...state,\r\n                    [e.target.name]: e.target.checked,\r\n                    txtBegin: '',\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleClose = (e) => {\r\n        setSnakOpen(null);\r\n        setSnakMessage(null);\r\n    };\r\n\r\n    const [backDropopen, SetBackDropopen] = React.useState(false);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Backdrop className={classes.backdrop} open={backDropopen}>\r\n                <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n\r\n            <CustomSnakbar\r\n                open={snakOpen}\r\n                msg={snakMessage}\r\n                handleClose={handleClose}\r\n            />\r\n            <Helmet>\r\n                <title>Add text to each line | mathcalc</title>\r\n                <meta name=\"keywords\" content=\"append, add, texts, lines, number, prepend, concatenate,mathcalc\" />\r\n                <meta name=\"description\" content=\"Append text to the end or beginning of each line. You can add constant text, the number of line and more\" />\r\n                <meta property=\"og:title\" content=\"Add text to each line | mathcalc\">\r\n                </meta>\r\n                <meta property=\"og:url\" content=\"https://mathcalc.xyz/add-text-each-line/\">\r\n                </meta>\r\n                <meta property=\"og:description\"\r\n                    content=\"Append text to the end or beginning of each line. You can add constant text, the number of line, the line itself and more\">\r\n                </meta>\r\n            </Helmet>\r\n            <Container maxWidth=\"xl\">\r\n                <SubNavBar\r\n                    pageTitle=\"ADD TEXT TO EACH LINE\"\r\n                    links={[{\r\n                        url: \"/text-lists/\",\r\n                        urlName: \"Text and Lists\"\r\n                    }]}\r\n                />\r\n                <section className=\"hero\" data-v-23847e07>\r\n                    <div style={{ padding: '2rem 0.5rem' }}>\r\n                        <div className=\"container\">\r\n                            <h1 className=\"subtitle is-spaced is-uppercase has-text-weight-bold\">\r\n                                ADD TEXT TO EACH LINE ONLINE</h1>\r\n                            <p className=\"  has-text-grey\">\r\n                                Append text to the end or beginning of each line. You can add constant text, the number of line , the line itself and more</p>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <div className=\"container\" data-v-14591542>\r\n                    <div className=\"columns\" data-v-14591542>\r\n                        <div className=\"column is-6\" data-v-14591542>\r\n                            <Card elevation={1} className=\"box\" data-v-14591542>\r\n                                <div className=\"content\" data-v-14591542>\r\n                                    <Typography variant=\"h6\" className={'text-option'}>\r\n                                        Original List</Typography><br />\r\n                                    <span><strong>The text you want to work with</strong></span><br />\r\n                                    <textarea className=\"input\"\r\n                                        id=\"inputText\"\r\n                                        type=\"text\"\r\n                                        maxLength=\"50000\"\r\n                                        style={{\r\n                                            resize: 'none',\r\n                                            minWidth: '255px',\r\n                                            minHeight: '220px',\r\n                                            marginBottom: '10px'\r\n                                        }} value={state.inputText}\r\n                                        onChange={onInputChange}\r\n                                    ></textarea>\r\n                                    <br />\r\n                                </div>\r\n                            </Card>\r\n                        </div>\r\n                        <div className=\"column is-6\" data-v-14591542>\r\n                            <Card elevation={1} className=\"box \" data-v-14591542>\r\n                                <div className=\"content\" data-v-14591542>\r\n                                    <Typography variant=\"h6\" className={'text-option'}>New Text</Typography><br />\r\n                                    <span>Tip: write  <strong>%N%</strong> for the line number; and <strong>%L%</strong> for the line itself</span>\r\n                                    <div className={'resultsec'}>\r\n                                        <textarea className=\"input\"\r\n                                            id=\"result\"\r\n                                            style={{\r\n                                                resize: 'none',\r\n                                                minWidth: '255px',\r\n                                                minHeight: '210px'\r\n                                            }} value={state.result}\r\n                                            onChange={onInputChange}\r\n                                        ></textarea>\r\n                                    </div>\r\n                                    <Button variant=\"contained\" style={{ margin: '5px' }} className={\"shade_me button is-success\"}\r\n                                        startIcon={<SettingIcon />}\r\n                                        onClick={onClickCalculate}\r\n                                    >Execute</Button>\r\n                                    <Button variant=\"contained\" style={{ margin: '5px' }} className={\"button is-info\"}\r\n                                        startIcon={<FileCopyIcon />}\r\n                                        onClick={fncopytext}\r\n                                    >Copy</Button>\r\n                                    <Button variant=\"contained\" style={{ margin: '5px' }} className=\"button is-info\"\r\n                                        startIcon={<FontDownloadIcon />}\r\n                                        onClick={onClickDownload}\r\n                                    >Download</Button>\r\n                                </div>\r\n                            </Card>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"columns\" data-v-14591542>\r\n                        <div className=\"column is-6\">\r\n                            <Card className=\"box \" data-v-14591542>\r\n                                <div className=\"content\" data-v-14591542>\r\n                                    <Typography variant=\"h6\" className={'text-option'}>Options</Typography><br />\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Checkbox\r\n                                                checked={state.isBegin}\r\n                                                onChange={onCheckboxChange}\r\n                                                name=\"isBegin\"\r\n                                                color=\"primary\"\r\n                                            />\r\n                                        }\r\n                                        label=\"Add text at the beginning of the lines?\"\r\n                                    /><br />\r\n                                    {!state.isBegin ? <></> : <>\r\n                                        <FormControl>\r\n                                            <span><strong>Text at the beginning</strong></span>\r\n                                            <TextField className={classes.formelems} onChange={onInputChange}\r\n                                                value={state.txtBegin}\r\n                                                placeholder=\"Text at the beginning\"\r\n                                                id=\"txtBegin\" variant=\"outlined\">\r\n                                            </TextField>\r\n                                        </FormControl>\r\n                                    </>\r\n                                    }\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Checkbox\r\n                                                checked={state.isEnd}\r\n                                                onChange={onCheckboxChange}\r\n                                                name=\"isEnd\"\r\n                                                color=\"primary\"\r\n                                            />\r\n                                        }\r\n                                        label=\"Add text at the end of the lines?\"\r\n                                    /><br />\r\n                                    {!state.isEnd ? <></> : <>\r\n                                        <FormControl>\r\n                                            <span><strong>Text at the end</strong></span>\r\n                                            <TextField className={classes.formelems}\r\n                                                onChange={onInputChange}\r\n                                                value={state.txtEnd}\r\n                                                placeholder=\"Text at the end\"\r\n                                                id=\"txtEnd\" variant=\"outlined\" type=\"text\"></TextField>\r\n                                        </FormControl>\r\n                                    </>\r\n                                    }\r\n                                    <br />\r\n                                    <span><strong>How to count lines?</strong></span><br />\r\n                                    <ButtonGroup style={{ margin: '10px 0px' }}>\r\n                                        <Button aria-label=\"1,2,3..\"\r\n                                            className={!state.isAddLeadingzero ? \"button is-success\" : 'button'}\r\n                                            onClick={onChangeLeadingZero}\r\n                                        >\r\n                                            1,2,3..\r\n                                    </Button>\r\n                                        <Button aria-label=\"01,02,03..\"\r\n                                            className={state.isAddLeadingzero ? \"button is-success\" : 'button'}\r\n                                            onClick={onChangeLeadingZero}\r\n                                        >\r\n                                            01,02,03..\r\n                                    </Button>\r\n                                    </ButtonGroup><br />\r\n                                </div>\r\n                            </Card>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <br />\r\n            </Container>\r\n        </div >\r\n    );\r\n}\r\n"],"sourceRoot":""}