{"version":3,"sources":["Components/SubNavBar.js","Pages/Tools/numbers/Generatelistofnums.js"],"names":["useStyle","makeStyles","theme","link","color","cursor","textDecoration","hr","height","backgroundColor","margin","SubNavBar","props","classes","className","data-v-23847e07","style","padding","separator","fontSize","aria-label","links","map","i","to","url","urlName","pageTitle","component","txtTitle","marginTop","useStyles","root","flexGrow","overflow","divcalc","borderRadius","formelems","row","imgcenter","marginLeft","backdrop","zIndex","drawer","Generatelistofnums","React","useState","result","fNumber","lNumber","stepDiff","isAddLeadingzero","textBefore","textAfter","sameorSeperateline","state","setState","snakOpen","setSnakOpen","snakMessage","setSnakMessage","onClickCalculate","resulttext","fnumber","parseFloat","lnumber","stepnum","trailingzero","j","toString","length","continuenum","slice","setTimeout","SetBackDropopen","resultDiv","document","getElementsByClassName","useEffect","onInputChange","e","target","id","value","onChangeLeadingZero","onChangeoneSeperateLine","backDropopen","open","msg","handleClose","name","content","http-equiv","maxWidth","elevation","variant","onChange","type","onClick","resize","minWidth","minHeight","startIcon","copyInput","getElementById","select","setSelectionRange","execCommand","strFile","blob","Blob","fileSave"],"mappings":"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","file":"static/js/94.86d40d03.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Breadcrumbs, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    link: {\r\n        color: '#3f51b5',\r\n        cursor: 'pointer',\r\n        '& hover': {\r\n            textDecoration: 'underline'\r\n        }\r\n    },\r\n    hr: {\r\n        height: '1px',\r\n        backgroundColor: '#c5c5c5',\r\n        margin: '1.5rem 0 0 0',\r\n    }\r\n}));\r\n\r\nexport default function SubNavBar(props) {\r\n    const classes = useStyle();\r\n    return (\r\n        <section className=\"hero\" data-v-23847e07>\r\n            <div style={{ padding: '2rem 0.5rem 0rem 0.5rem' }}>\r\n                <div className=\"container\">\r\n                    <h1 style={{ margin: '0px' }} className=\"subtitle is-uppercase has-text-weight-bold\">\r\n                        <Breadcrumbs className=\"subtitle is-uppercase has-text-weight-bold\" separator={<NavigateNextIcon fontSize=\"small\" />} aria-label=\"breadcrumb\">\r\n                            {\r\n                                props.links ? props.links.map((link, i) => {\r\n                                    return <Link key={i} className={classes.link} to={link.url}>{link.urlName}</Link>\r\n                                }) : <></>\r\n                            }\r\n                            {\r\n                                props.pageTitle ? <Typography component=\"h1\" className=\"\">{props.pageTitle}</Typography>\r\n                                    : <></>\r\n                            }\r\n                        </Breadcrumbs>\r\n                    </h1>\r\n                    {props.txtTitle ? <h1 style={{ marginTop: '1rem' }} >\r\n                        {props.txtTitle}</h1> : <></>}\r\n                </div>\r\n            </div>\r\n            <hr className={classes.hr} />\r\n        </section >\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Button, Typography, ButtonGroup,\r\n    Backdrop, CircularProgress, Container, Card,\r\n} from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SettingIcon from '@material-ui/icons/Settings';\r\nimport FontDownloadIcon from '@material-ui/icons/GetApp';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport Helmet from 'react-helmet';\r\nimport CustomSnakbar from '../../../Components/CustomSnakbar';\r\nimport * as fileSave from \"file-saver\";\r\nimport SubNavBar from '../../../Components/SubNavBar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        overflow: 'hidden'\r\n    },\r\n    divcalc: {\r\n        borderRadius: '12px',\r\n        padding: '1em',\r\n        color: '#314259'\r\n    },\r\n    formelems: {\r\n        '& > *': {\r\n            margin: '10px 0px 10px 0px',\r\n        },\r\n    },\r\n    row: {\r\n        margin: '10px'\r\n    },\r\n    imgcenter: {\r\n        marginLeft: '55px',\r\n    },\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n}));\r\n\r\nexport default function Generatelistofnums() {\r\n    const [state, setState] = React.useState({\r\n        result: '',\r\n        fNumber: 0,\r\n        lNumber: 1,\r\n        stepDiff: 1,\r\n        isAddLeadingzero: false,\r\n        textBefore: '',\r\n        textAfter: '',\r\n        sameorSeperateline: false,\r\n    })\r\n\r\n    const [snakOpen, setSnakOpen] = React.useState(null);\r\n    const [snakMessage, setSnakMessage] = React.useState(null);\r\n\r\n\r\n    const onClickCalculate = () => {\r\n        // SetBackDropopen(true);\r\n\r\n        let resulttext = \"\";\r\n        let fnumber = state.fNumber === '' ? 0 : parseFloat(state.fNumber);\r\n        let lnumber = state.lNumber === '' ? 0 : parseFloat(state.lNumber);\r\n        let stepnum = state.stepDiff === '' ? 0.0 : parseFloat(state.stepDiff);\r\n\r\n        let trailingzero = '';\r\n        for (let j = 1; j < state.lNumber.toString().length; ++j) {\r\n            trailingzero += '0';\r\n        }\r\n\r\n        if (fnumber > lnumber) {\r\n            setSnakOpen(true);\r\n            setSnakMessage('First number should be less than last number');\r\n        } else if (stepnum <= 0) {\r\n            setSnakOpen(true);\r\n            setSnakMessage('Step difference should be greater than 0');\r\n        } else {\r\n\r\n            if (state.sameorSeperateline) {\r\n                if (state.isAddLeadingzero) {\r\n                    resulttext = state.textBefore + trailingzero + fnumber + state.textAfter;\r\n                } else {\r\n                    resulttext = state.textBefore + fnumber + state.textAfter;\r\n                }\r\n            }\r\n            else {\r\n                if (state.isAddLeadingzero) {\r\n                    resulttext = state.textBefore + trailingzero + fnumber + state.textAfter + ' \\n';\r\n                } else {\r\n                    resulttext = state.textBefore + fnumber + state.textAfter + ' \\n';\r\n                }\r\n            }\r\n\r\n            let continuenum = fnumber;\r\n            for (let i = fnumber; i < lnumber; ++i) {\r\n                continuenum = parseFloat(continuenum + parseFloat(state.stepDiff))\r\n\r\n                trailingzero = trailingzero.slice(0, state.lNumber.toString().length - continuenum.toString().length);\r\n\r\n                if (continuenum <= lnumber) {\r\n                    if (state.sameorSeperateline) {\r\n                        if (state.isAddLeadingzero) {\r\n                            resulttext += state.textBefore + trailingzero + continuenum + state.textAfter;\r\n                        } else {\r\n                            resulttext += state.textBefore + continuenum + state.textAfter;\r\n                        }\r\n                    } else {\r\n                        if (state.isAddLeadingzero) {\r\n                            resulttext += state.textBefore + trailingzero + continuenum + state.textAfter + ' \\n';\r\n                        } else {\r\n                            resulttext += state.textBefore + continuenum + state.textAfter + ' \\n';\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            setState({\r\n                ...state,\r\n                result: resulttext,\r\n            });\r\n        }\r\n        setTimeout(() => {\r\n            SetBackDropopen(false);\r\n        }, 250);\r\n\r\n        //blink the result\r\n        let resultDiv = document.getElementsByClassName('resultDiv')[0];\r\n        resultDiv.className = 'resultDiv blink_me'\r\n        setTimeout(() => {\r\n            resultDiv.className = 'resultDiv';\r\n        }, 1000);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        onClickCalculate();\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n\r\n    const fncopytext = (e) => {\r\n        /* Get the text field */\r\n\r\n        let copyInput = document.getElementById('result');\r\n        /* Select the text field */\r\n        copyInput.select();\r\n        copyInput.setSelectionRange(0, 99999); /* For mobile devices */\r\n\r\n        /* Copy the text inside the text field */\r\n        document.execCommand(\"copy\");\r\n    }\r\n\r\n    const onClickDownload = () => {\r\n\r\n        let strFile = state.result;\r\n\r\n        let blob = new Blob([strFile], { type: 'text' });\r\n\r\n        fileSave.saveAs(blob, 'generatednumbers.txt');\r\n\r\n    }\r\n\r\n    const onInputChange = (e) => {\r\n        setState({\r\n            ...state, [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    const onChangeLeadingZero = (e) => {\r\n        setState({\r\n            ...state,\r\n            isAddLeadingzero: !state.isAddLeadingzero,\r\n        })\r\n    }\r\n\r\n    const onChangeoneSeperateLine = (e) => {\r\n        setState({\r\n            ...state,\r\n            sameorSeperateline: !state.sameorSeperateline,\r\n        })\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleClose = (e) => {\r\n        setSnakOpen(null);\r\n        setSnakMessage(null);\r\n    };\r\n\r\n    const [backDropopen, SetBackDropopen] = React.useState(false);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Backdrop className={classes.backdrop} open={backDropopen}>\r\n                <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n\r\n            <CustomSnakbar\r\n                open={snakOpen}\r\n                msg={snakMessage}\r\n                handleClose={handleClose}\r\n            />\r\n            <Helmet>\r\n                <title>Generate list of numbers online | mathcalc</title>\r\n                <meta name=\"keywords\" content=\"generate list of numbers online, generate list, generate numbers, generate word list,create list of numbers\" />\r\n                <meta name=\"description\" content=\"Generate list of numbers from first number to last number with step input and copy or download the result in text file\" />\r\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n                <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"></meta>\r\n            </Helmet>\r\n\r\n            <Container maxWidth=\"xl\">\r\n                <SubNavBar\r\n                    pageTitle=\"Generate List of Numbers\"\r\n                    links={[{\r\n                        url: \"/numbers/\",\r\n                        urlName: \"Numbers\"\r\n                    }]}\r\n                />\r\n                <section className=\"hero\" >\r\n                    <div style={{ padding: '2rem 0.5rem' }}>\r\n                        <div className=\"container\">\r\n                            <h1 className=\"subtitle is-spaced is-uppercase has-text-weight-bold\">\r\n                                GENERATE LIST OF NUMBERS ONLINE</h1>\r\n                            <p className=\"  has-text-grey\">\r\n                                Generate a list of numbers, choose the first and last numbers and the step between consecutive numbers</p>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <div className=\"container\" >\r\n                    <div className=\"columns\" >\r\n                        <div className=\"column is-6\" >\r\n                            <Card elevation={1} className=\"box\" >\r\n                                <div className=\"content\" >\r\n                                    <Typography variant=\"h6\" className={'text-option'}>Options</Typography><br />\r\n                                    <span><strong>First Number</strong></span><br />\r\n                                    <TextField className={classes.formelems} onChange={onInputChange}\r\n                                        value={state.fNumber} id=\"fNumber\" variant=\"outlined\" type=\"number\"></TextField><br />\r\n                                    <span><strong>Last Number</strong></span><br />\r\n                                    <TextField className={classes.formelems} onChange={onInputChange}\r\n                                        value={state.lNumber} id=\"lNumber\" variant=\"outlined\" type=\"number\"></TextField><br />\r\n                                    <span><strong>Step (difference between consecutive numbers)</strong></span><br />\r\n                                    <TextField className={classes.formelems} onChange={onInputChange}\r\n                                        value={state.stepDiff} id=\"stepDiff\" variant=\"outlined\" type=\"number\"></TextField><br />\r\n                                    <span><strong>Add leading zeros?</strong></span><br />\r\n                                    <ButtonGroup style={{ margin: '10px 0px' }}>\r\n                                        <Button aria-label=\"No (..., 7, 8, 9, ...)\"\r\n                                            className={!state.isAddLeadingzero ? \"button is-success\" : 'button'}\r\n                                            onClick={onChangeLeadingZero}\r\n                                        >\r\n                                            No (.., 7, 8, 9,..)\r\n                                </Button>\r\n                                        <Button aria-label=\"Yes (..., 07, 08, 09, ...)\"\r\n                                            className={state.isAddLeadingzero ? \"button is-success\" : 'button'}\r\n                                            onClick={onChangeLeadingZero}\r\n                                        >\r\n                                            YES (.., 07, 08, 09,..)\r\n                                    </Button>\r\n                                    </ButtonGroup><br />\r\n\r\n                                    <span><strong>Text Before</strong></span><br />\r\n                                    <TextField className={classes.formelems} onChange={onInputChange}\r\n                                        value={state.textBefore} id=\"textBefore\" variant=\"outlined\" ></TextField><br />\r\n\r\n                                    <span><strong>Text After</strong></span><br />\r\n                                    <TextField className={classes.formelems} onChange={onInputChange}\r\n                                        value={state.textAfter} id=\"textAfter\" variant=\"outlined\"></TextField><br />\r\n\r\n                                    <span><strong>Numbers listed in the same line or in separate lines?</strong></span><br />\r\n                                    <ButtonGroup style={{ marginTop: '9px' }}>\r\n                                        <Button aria-label=\"reduce\"\r\n                                            className={state.sameorSeperateline ? \"button is-success\" : 'button'}\r\n                                            onClick={onChangeoneSeperateLine}\r\n                                        >\r\n                                            One Line\r\n                                </Button>\r\n                                        <Button aria-label=\"increase\"\r\n                                            className={!state.sameorSeperateline ? \"button is-success\" : 'button'}\r\n                                            onClick={onChangeoneSeperateLine}\r\n                                        > Seperate Lines</Button>\r\n                                    </ButtonGroup>\r\n                                </div>\r\n                            </Card>\r\n                        </div>\r\n                        <div className=\"column is-6\" >\r\n                            <Card elevation={1} className=\"box \" >\r\n                                <div className=\"content\" >\r\n                                    <Typography variant=\"h6\" className={'text-option'}>Result</Typography>\r\n                                    <div className={'resultDiv blink_me'}>\r\n                                        <textarea className=\"input\"\r\n                                            id=\"result\"\r\n                                            style={{\r\n                                                resize: 'none',\r\n                                                minWidth: '255px',\r\n                                                minHeight: '250px'\r\n                                            }} value={state.result}\r\n                                            onChange={onInputChange}\r\n                                        ></textarea>\r\n                                    </div>\r\n                                    <br />\r\n                                    <Button variant=\"contained\" style={{ margin: '5px' }} className={\"button is-success\"}\r\n                                        startIcon={<SettingIcon />}\r\n                                        onClick={onClickCalculate}\r\n                                    >Calculate</Button>\r\n                                    <Button variant=\"contained\" style={{ margin: '5px' }} className={\"button is-info\"}\r\n                                        startIcon={<FileCopyIcon />}\r\n                                        onClick={fncopytext}\r\n                                    >Copy</Button>\r\n                                    <Button variant=\"contained\" style={{ margin: '5px' }} className=\"button is-info\"\r\n                                        startIcon={<FontDownloadIcon />}\r\n                                        onClick={onClickDownload}\r\n                                    >Download</Button>\r\n                                </div>\r\n                            </Card>\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                </div>\r\n            </Container>\r\n        </div >\r\n    );\r\n}\r\n"],"sourceRoot":""}