{"version":3,"sources":["Components/SubNavBar.js","Pages/Tools/numbers/Sortnumbers.js"],"names":["useStyle","makeStyles","theme","link","color","cursor","textDecoration","hr","height","backgroundColor","margin","SubNavBar","props","classes","className","style","padding","separator","fontSize","links","map","i","to","url","urlName","pageTitle","component","txtTitle","marginTop","useStyles","root","flexGrow","overflow","divcalc","borderRadius","formelems","row","imgcenter","marginLeft","backdrop","zIndex","drawer","Sortnumbers","React","useState","resulttext","originalText","originalArray","sortedArray","isSortasc","isRandom","state","setState","onChangeSorttype","snakOpen","setSnakOpen","snakMessage","setSnakMessage","onClickCalculate","arrOriginalArray","split","sort","a","b","Math","round","random","toString","setTimeout","SetBackDropopen","resultDiv","document","getElementsByClassName","useEffect","onInputChange","e","target","id","value","backDropopen","open","msg","handleClose","name","content","maxWidth","elevation","variant","resize","minWidth","minHeight","onChange","control","checked","label","onClick","startIcon","copyInput","getElementById","select","setSelectionRange","execCommand","strFile","blob","Blob","type","fileSave"],"mappings":"uGAAA,qGAMMA,EAAWC,aAAW,SAACC,GAAD,MAAY,CACpCC,KAAM,CACFC,MAAO,UACPC,OAAQ,UACR,UAAW,CACPC,eAAgB,cAGxBC,GAAI,CACAC,OAAQ,MACRC,gBAAiB,UACjBC,OAAQ,oBAID,SAASC,EAAUC,GAC9B,IAAMC,EAAUb,IAChB,OACI,0BAASc,UAAU,OAAO,qBAA1B,UACI,qBAAKC,MAAO,CAAEC,QAAS,2BAAvB,SACI,sBAAKF,UAAU,YAAf,UACI,oBAAIC,MAAO,CAAEL,OAAQ,OAASI,UAAU,6CAAxC,SACI,eAAC,IAAD,CAAaA,UAAU,6CAA6CG,UAAW,cAAC,IAAD,CAAkBC,SAAS,UAAY,aAAW,aAAjI,UAEQN,EAAMO,MAAQP,EAAMO,MAAMC,KAAI,SAACjB,EAAMkB,GACjC,OAAO,cAAC,IAAD,CAAcP,UAAWD,EAAQV,KAAMmB,GAAInB,EAAKoB,IAAhD,SAAsDpB,EAAKqB,SAAhDH,MACjB,6BAGLT,EAAMa,UAAY,cAAC,IAAD,CAAYC,UAAU,KAAKZ,UAAU,GAArC,SAAyCF,EAAMa,YAC3D,kCAIjBb,EAAMe,SAAW,oBAAIZ,MAAO,CAAEa,UAAW,QAAxB,SACbhB,EAAMe,WAAiB,kCAGpC,oBAAIb,UAAWD,EAAQN,U,oTC9B7BsB,EAAY5B,aAAW,SAACC,GAAD,MAAY,CACrC4B,KAAM,CACFC,SAAU,EACVC,SAAU,UAEdC,QAAS,CACLC,aAAc,OACdlB,QAAS,MACTZ,MAAO,WAEX+B,UAAW,CACP,QAAS,CACLzB,OAAQ,sBAGhB0B,IAAK,CACD1B,OAAQ,QAEZ2B,UAAW,CACPC,WAAY,QAEhBC,SAAU,CACNC,OAAQtC,EAAMsC,OAAOC,OAAS,EAC9BrC,MAAO,YAIA,SAASsC,IACpB,MAA0BC,IAAMC,SAAS,CACrCC,WAAY,GACZC,aAAc,GACdC,cAAe,GACfC,YAAa,GACbC,WAAW,EACXC,UAAU,IANd,mBAAOC,EAAP,KAAcC,EAAd,KASMC,EAAmB,WACrBD,EAAS,2BACFD,GADC,IAEJF,WAAYE,EAAMF,cAI1B,EAAgCN,IAAMC,SAAS,MAA/C,mBAAOU,EAAP,KAAiBC,EAAjB,KACA,EAAsCZ,IAAMC,SAAS,MAArD,mBAAOY,EAAP,KAAoBC,EAApB,KAGMC,EAAmB,WAGrB,IACIC,EADaR,EAAML,aACWc,MAAM,KAGpCT,EAAMD,SACNS,EAAiBE,MAAK,SAAUC,EAAGC,GAAK,OAAOC,KAAKC,MAAMD,KAAKE,QAAQ,EAAG,IAAM,KACzEf,EAAMF,UACbU,EAAiBE,MAAK,SAAUC,EAAGC,GAAK,OAAOD,EAAIC,KAEnDJ,EAAiBE,MAAK,SAAUC,EAAGC,GAAK,OAAOA,EAAID,KAEvDV,EAAS,2BACFD,GADC,IAEJN,WAAYc,EAAiBQ,cAGjCC,YAAW,WACPC,GAAgB,KACjB,KAEH,IAAIC,EAAYC,SAASC,uBAAuB,aAAa,GAC7DF,EAAUxD,UAAY,qBACtBsD,YAAW,WACPE,EAAUxD,UAAY,cACvB,MAGP6B,IAAM8B,WAAU,WACZf,MAED,IAGH,IA6BMgB,EAAgB,SAACC,GACnBvB,EAAS,2BACFD,GADC,kBACOwB,EAAEC,OAAOC,GAAKF,EAAEC,OAAOE,UAIpCjE,EAAUgB,IAOhB,EAAwCc,IAAMC,UAAS,GAAvD,mBAAOmC,EAAP,KAAqBV,EAArB,KAEA,OACI,sBAAKvD,UAAWD,EAAQiB,KAAxB,UACI,cAAC,IAAD,CAAUhB,UAAWD,EAAQ0B,SAAUyC,KAAMD,EAA7C,SACI,cAAC,IAAD,CAAkB3E,MAAM,cAG5B,cAAC,IAAD,CACI4E,KAAM1B,EACN2B,IAAKzB,EACL0B,YAhBQ,SAACP,GACjBpB,EAAY,MACZE,EAAe,SAgBX,eAAC,IAAD,WACI,mEACA,sBAAM0B,KAAK,WAAWC,QAAQ,6BAC9B,sBAAMD,KAAK,cAAcC,QAAQ,6BACjC,sBAAMD,KAAK,WAAWC,QAAQ,wCAC9B,sBAAM,aAAW,kBAAkBA,QAAQ,wBAE/C,eAAC,IAAD,CAAWC,SAAS,KAApB,UACI,cAAC,IAAD,CACI5D,UAAU,eACVN,MAAO,CAAC,CACJI,IAAK,YACLC,QAAS,cAGjB,yBAASV,UAAU,OAAnB,SACI,qBAAKC,MAAO,CAAEC,QAAS,eAAvB,SACI,sBAAKF,UAAU,YAAf,UACI,oBAAIA,UAAU,uDAAd,iCAEA,mBAAGA,UAAU,kBAAb,8FAKZ,sBAAKA,UAAU,YAAf,UACI,sBAAKA,UAAU,UAAf,UACI,qBAAKA,UAAU,cAAf,SACI,cAAC,IAAD,CAAMwE,UAAW,EAAGxE,UAAU,MAA9B,SACI,sBAAKA,UAAU,UAAf,UACI,cAAC,IAAD,CAAYyE,QAAQ,KAAKzE,UAAW,cAApC,2BAA6E,uBAC7E,+BAAM,8FAA8E,uBAAM,uBAC1F,0BAAUA,UAAU,QAChB+D,GAAG,eACH9D,MAAO,CACHyE,OAAQ,OACRC,SAAU,QACVC,UAAW,SACZZ,MAAO3B,EAAML,aAChB6C,SAAUjB,IAEd,8BAIZ,qBAAK5D,UAAU,cAAf,SACI,cAAC,IAAD,CAAMA,UAAU,OAAhB,SACI,sBAAKA,UAAU,UAAf,UACI,cAAC,IAAD,CAAYyE,QAAQ,KAAKzE,UAAW,cAApC,qBAAuE,uBAEvE,cAAC,IAAD,CACI8E,QACI,cAAC,IAAD,CACIC,QAAS1C,EAAMD,SACfyC,SAvFjB,WACvBvC,EAAS,2BACFD,GADC,IAEJD,UAAWC,EAAMD,aAqFmBiC,KAAK,WACL/E,MAAM,YAGd0F,MAAM,wCACR,uBACD3C,EAAMD,SAAW,6BAAQ,qCAAE,+BAAM,6CAA6B,uBAC3D,eAAC,IAAD,CAAanC,MAAO,CAAEL,OAAQ,YAA9B,UACI,cAAC,IAAD,CAAQ,aAAW,YACfI,UAAWqC,EAAMF,UAAY,oBAAsB,SACnD8C,QAAS1C,EAFb,uBAMA,cAAC,IAAD,CAAQ,aAAW,aACfvC,UAAYqC,EAAMF,UAAkC,SAAtB,oBAC9B8C,QAAS1C,EAFb,2BAMU,0BAElB,cAAC,IAAD,CAAYkC,QAAQ,KAAKzE,UAAW,cAApC,oBAAsE,uBACtE,qBAAKA,UAAW,qBAAhB,SACI,0BAAUA,UAAU,QAChB+D,GAAG,aACH9D,MAAO,CACHyE,OAAQ,OACRC,SAAU,QACVC,UAAW,SACZZ,MAAO3B,EAAMN,WAChB8C,SAAUjB,MAGlB,uBACA,cAAC,IAAD,CAAQa,QAAQ,YAAYxE,MAAO,CAAEL,OAAQ,OAASI,UAAW,oBAC7DkF,UAAW,cAAC,IAAD,IACXD,QAASrC,EAFb,uBAIA,cAAC,IAAD,CAAQ6B,QAAQ,YAAYxE,MAAO,CAAEL,OAAQ,OAASI,UAAW,iBAC7DkF,UAAW,cAAC,IAAD,IACXD,QAvJjB,SAACpB,GAGhB,IAAIsB,EAAY1B,SAAS2B,eAAe,cAExCD,EAAUE,SACVF,EAAUG,kBAAkB,EAAG,OAG/B7B,SAAS8B,YAAY,SA4IO,kBAIA,cAAC,IAAD,CAAQd,QAAQ,YAAYxE,MAAO,CAAEL,OAAQ,OAASI,UAAU,iBAC5DkF,UAAW,cAAC,IAAD,IACXD,QA/IZ,WAEpB,IAAIO,EAAUnD,EAAMN,WAEhB0D,EAAO,IAAIC,KAAK,CAACF,GAAU,CAAEG,KAAM,SAEvCC,SAAgBH,EAAM,uBAuIM,gCAQhB","file":"static/js/95.f38a930c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Breadcrumbs, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    link: {\r\n        color: '#3f51b5',\r\n        cursor: 'pointer',\r\n        '& hover': {\r\n            textDecoration: 'underline'\r\n        }\r\n    },\r\n    hr: {\r\n        height: '1px',\r\n        backgroundColor: '#c5c5c5',\r\n        margin: '1.5rem 0 0 0',\r\n    }\r\n}));\r\n\r\nexport default function SubNavBar(props) {\r\n    const classes = useStyle();\r\n    return (\r\n        <section className=\"hero\" data-v-23847e07>\r\n            <div style={{ padding: '2rem 0.5rem 0rem 0.5rem' }}>\r\n                <div className=\"container\">\r\n                    <h1 style={{ margin: '0px' }} className=\"subtitle is-uppercase has-text-weight-bold\">\r\n                        <Breadcrumbs className=\"subtitle is-uppercase has-text-weight-bold\" separator={<NavigateNextIcon fontSize=\"small\" />} aria-label=\"breadcrumb\">\r\n                            {\r\n                                props.links ? props.links.map((link, i) => {\r\n                                    return <Link key={i} className={classes.link} to={link.url}>{link.urlName}</Link>\r\n                                }) : <></>\r\n                            }\r\n                            {\r\n                                props.pageTitle ? <Typography component=\"h1\" className=\"\">{props.pageTitle}</Typography>\r\n                                    : <></>\r\n                            }\r\n                        </Breadcrumbs>\r\n                    </h1>\r\n                    {props.txtTitle ? <h1 style={{ marginTop: '1rem' }} >\r\n                        {props.txtTitle}</h1> : <></>}\r\n                </div>\r\n            </div>\r\n            <hr className={classes.hr} />\r\n        </section >\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Button, Typography, ButtonGroup,\r\n    Backdrop, CircularProgress, Checkbox, FormControlLabel, Container, Card\r\n} from '@material-ui/core';\r\nimport SettingIcon from '@material-ui/icons/Settings';\r\nimport FontDownloadIcon from '@material-ui/icons/GetApp';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport Helmet from 'react-helmet';\r\nimport CustomSnakbar from '../../../Components/CustomSnakbar';\r\nimport * as fileSave from \"file-saver\";\r\nimport SubNavBar from '../../../Components/SubNavBar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        overflow: 'hidden'\r\n    },\r\n    divcalc: {\r\n        borderRadius: '12px',\r\n        padding: '1em',\r\n        color: '#314259'\r\n    },\r\n    formelems: {\r\n        '& > *': {\r\n            margin: '10px 0px 10px 0px',\r\n        },\r\n    },\r\n    row: {\r\n        margin: '10px'\r\n    },\r\n    imgcenter: {\r\n        marginLeft: '55px',\r\n    },\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n}));\r\n\r\nexport default function Sortnumbers() {\r\n    const [state, setState] = React.useState({\r\n        resulttext: '',\r\n        originalText: '',\r\n        originalArray: [],\r\n        sortedArray: [],\r\n        isSortasc: true,\r\n        isRandom: false,\r\n    })\r\n\r\n    const onChangeSorttype = () => {\r\n        setState({\r\n            ...state,\r\n            isSortasc: !state.isSortasc\r\n        })\r\n    }\r\n\r\n    const [snakOpen, setSnakOpen] = React.useState(null);\r\n    const [snakMessage, setSnakMessage] = React.useState(null);\r\n\r\n\r\n    const onClickCalculate = () => {\r\n        // SetBackDropopen(true);\r\n\r\n        let resulttext = state.originalText;\r\n        let arrOriginalArray = resulttext.split(',');\r\n\r\n        //sorted result array store in same variable\r\n        if (state.isRandom) {\r\n            arrOriginalArray.sort(function (a, b) { return Math.round(Math.random(-1, 1)) - 1 });\r\n        } else if (state.isSortasc) {\r\n            arrOriginalArray.sort(function (a, b) { return a - b });\r\n        } else {\r\n            arrOriginalArray.sort(function (a, b) { return b - a });\r\n        }\r\n        setState({\r\n            ...state,\r\n            resulttext: arrOriginalArray.toString(),\r\n        })\r\n\r\n        setTimeout(() => {\r\n            SetBackDropopen(false);\r\n        }, 250);\r\n        //blink the result\r\n        let resultDiv = document.getElementsByClassName('resultDiv')[0];\r\n        resultDiv.className = 'resultDiv blink_me'\r\n        setTimeout(() => {\r\n            resultDiv.className = 'resultDiv';\r\n        }, 1000);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        onClickCalculate();\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n\r\n    const fncopytext = (e) => {\r\n        /* Get the text field */\r\n\r\n        let copyInput = document.getElementById('resulttext');\r\n        /* Select the text field */\r\n        copyInput.select();\r\n        copyInput.setSelectionRange(0, 99999); /* For mobile devices */\r\n\r\n        /* Copy the text inside the text field */\r\n        document.execCommand(\"copy\");\r\n    }\r\n\r\n    const onClickDownload = () => {\r\n\r\n        let strFile = state.resulttext;\r\n\r\n        let blob = new Blob([strFile], { type: 'text' });\r\n\r\n        fileSave.saveAs(blob, 'sorted_numbers.txt');\r\n\r\n    }\r\n\r\n    const handleChangeRandom = () => {\r\n        setState({\r\n            ...state,\r\n            isRandom: !state.isRandom\r\n        });\r\n    }\r\n\r\n    const onInputChange = (e) => {\r\n        setState({\r\n            ...state, [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleClose = (e) => {\r\n        setSnakOpen(null);\r\n        setSnakMessage(null);\r\n    };\r\n\r\n    const [backDropopen, SetBackDropopen] = React.useState(false);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Backdrop className={classes.backdrop} open={backDropopen}>\r\n                <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n\r\n            <CustomSnakbar\r\n                open={snakOpen}\r\n                msg={snakMessage}\r\n                handleClose={handleClose}\r\n            />\r\n            <Helmet>\r\n                <title>Sort Numbers online | mathcalc</title>\r\n                <meta name=\"keywords\" content=\"sort numbers from a list\" />\r\n                <meta name=\"description\" content=\"Sort numbers from a list\" />\r\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n                <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"></meta>\r\n            </Helmet>\r\n            <Container maxWidth=\"xl\">\r\n                <SubNavBar\r\n                    pageTitle=\"Sort Numbers\"\r\n                    links={[{\r\n                        url: \"/numbers/\",\r\n                        urlName: \"Numbers\"\r\n                    }]}\r\n                />\r\n                <section className=\"hero\">\r\n                    <div style={{ padding: '2rem 0.5rem' }}>\r\n                        <div className=\"container\">\r\n                            <h1 className=\"subtitle is-spaced is-uppercase has-text-weight-bold\">\r\n                                SORT NUMBERS ONLINE</h1>\r\n                            <p className=\"  has-text-grey\">\r\n                                Sort numbers from a list in ascending order, descending order or randomly</p>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <div className=\"container\" >\r\n                    <div className=\"columns\" >\r\n                        <div className=\"column is-6\" >\r\n                            <Card elevation={1} className=\"box\" >\r\n                                <div className=\"content\" >\r\n                                    <Typography variant=\"h6\" className={'text-option'}>Original List</Typography><br />\r\n                                    <span><strong>The numbers you want to sort with comma (,) seperation</strong></span><br /><br />\r\n                                    <textarea className=\"input\"\r\n                                        id=\"originalText\"\r\n                                        style={{\r\n                                            resize: 'none',\r\n                                            minWidth: '255px',\r\n                                            minHeight: '250px'\r\n                                        }} value={state.originalText}\r\n                                        onChange={onInputChange}\r\n                                    ></textarea>\r\n                                    <br />\r\n                                </div>\r\n                            </Card>\r\n                        </div>\r\n                        <div className=\"column is-6\" >\r\n                            <Card className=\"box \" >\r\n                                <div className=\"content\" >\r\n                                    <Typography variant=\"h6\" className={'text-option'}>Options</Typography><br />\r\n\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Checkbox\r\n                                                checked={state.isRandom}\r\n                                                onChange={handleChangeRandom}\r\n                                                name=\"checkedB\"\r\n                                                color=\"primary\"\r\n                                            />\r\n                                        }\r\n                                        label=\"Arrange the numbers in random order\"\r\n                                    /><br />\r\n                                    {state.isRandom ? <></> : <><span><strong>Order</strong></span><br />\r\n                                        <ButtonGroup style={{ margin: '10px 0px' }}>\r\n                                            <Button aria-label=\"Ascending\"\r\n                                                className={state.isSortasc ? \"button is-success\" : 'button'}\r\n                                                onClick={onChangeSorttype}\r\n                                            >\r\n                                                Ascending\r\n                                            </Button>\r\n                                            <Button aria-label=\"Descending\"\r\n                                                className={!state.isSortasc ? \"button is-success\" : 'button'}\r\n                                                onClick={onChangeSorttype}\r\n                                            >\r\n                                                Descending\r\n                                            </Button>\r\n                                        </ButtonGroup><br />\r\n                                    </>}\r\n                                    <Typography variant=\"h6\" className={'text-option'}>Result</Typography><br />\r\n                                    <div className={'resultDiv blink_me'}>\r\n                                        <textarea className=\"input\"\r\n                                            id=\"resulttext\"\r\n                                            style={{\r\n                                                resize: 'none',\r\n                                                minWidth: '255px',\r\n                                                minHeight: '250px'\r\n                                            }} value={state.resulttext}\r\n                                            onChange={onInputChange}\r\n                                        ></textarea>\r\n                                    </div>\r\n                                    <br />\r\n                                    <Button variant=\"contained\" style={{ margin: '5px' }} className={\"button is-success\"}\r\n                                        startIcon={<SettingIcon />}\r\n                                        onClick={onClickCalculate}\r\n                                    >Calculate</Button>\r\n                                    <Button variant=\"contained\" style={{ margin: '5px' }} className={\"button is-info\"}\r\n                                        startIcon={<FileCopyIcon />}\r\n                                        onClick={fncopytext}\r\n                                    >Copy</Button>\r\n                                    <Button variant=\"contained\" style={{ margin: '5px' }} className=\"button is-info\"\r\n                                        startIcon={<FontDownloadIcon />}\r\n                                        onClick={onClickDownload}\r\n                                    >Download</Button>\r\n                                </div>\r\n                            </Card>\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                </div>\r\n            </Container>\r\n        </div >\r\n    );\r\n}"],"sourceRoot":""}