{"version":3,"sources":["Components/SubNavBar.js","Pages/Files/apps/Imagecompressor.js"],"names":["useStyle","makeStyles","theme","link","color","cursor","textDecoration","hr","height","backgroundColor","margin","SubNavBar","props","classes","className","data-v-23847e07","style","padding","separator","fontSize","aria-label","links","map","i","to","url","urlName","pageTitle","component","txtTitle","marginTop","useStyles","root","minHeight","flexGrow","overflow","card","textAlign","input","Imagecompressor","handle","e","imageFile","target","files","letThis","reader","FileReader","onloadend","image","Image","src","result","onload","ev","setState","originalLink","URL","createObjectURL","originalImage","outputFileName","name","uploadImage","naturalHeight","width","naturalWidth","readAsDataURL","changeValue","value","click","preventDefault","output","options","maxSizeMB","state","maxWidthOrHeight","useWebWorker","size","alert","imageCompression","then","x","downloadLink","compressedLink","comwidth","comheight","outputimageSize","length","clicked","snakOpen","snakMessage","this","content","maxWidth","data-v-14591542","container","spacing","justifyContent","item","xl","sm","md","lg","elevation","alt","id","variant","toFixed","type","onChange","accept","display","onClick","label","a","document","createElement","href","download","fill","React","Component"],"mappings":"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","file":"static/js/82.9a9820fb.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Breadcrumbs, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    link: {\r\n        color: '#3f51b5',\r\n        cursor: 'pointer',\r\n        '& hover': {\r\n            textDecoration: 'underline'\r\n        }\r\n    },\r\n    hr: {\r\n        height: '1px',\r\n        backgroundColor: '#c5c5c5',\r\n        margin: '1.5rem 0 0 0',\r\n    }\r\n}));\r\n\r\nexport default function SubNavBar(props) {\r\n    const classes = useStyle();\r\n    return (\r\n        <section className=\"hero\" data-v-23847e07>\r\n            <div style={{ padding: '2rem 0.5rem 0rem 0.5rem' }}>\r\n                <div className=\"container\">\r\n                    <h1 style={{ margin: '0px' }} className=\"subtitle is-uppercase has-text-weight-bold\">\r\n                        <Breadcrumbs className=\"subtitle is-uppercase has-text-weight-bold\" separator={<NavigateNextIcon fontSize=\"small\" />} aria-label=\"breadcrumb\">\r\n                            {\r\n                                props.links ? props.links.map((link, i) => {\r\n                                    return <Link key={i} className={classes.link} to={link.url}>{link.urlName}</Link>\r\n                                }) : <></>\r\n                            }\r\n                            {\r\n                                props.pageTitle ? <Typography component=\"h1\" className=\"\">{props.pageTitle}</Typography>\r\n                                    : <></>\r\n                            }\r\n                        </Breadcrumbs>\r\n                    </h1>\r\n                    {props.txtTitle ? <h1 style={{ marginTop: '1rem' }} >\r\n                        {props.txtTitle}</h1> : <></>}\r\n                </div>\r\n            </div>\r\n            <hr className={classes.hr} />\r\n        </section >\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport imageCompression from \"browser-image-compression\";\r\nimport { Card, Container, Grid, Button, CardContent, Typography, TextField } from \"@material-ui/core\";\r\nimport InsertPhotoIcon from '@material-ui/icons/InsertPhoto';\r\nimport Helmet from 'react-helmet';\r\nimport SubNavBar from \"../../../Components/SubNavBar\";\r\n\r\nconst useStyles = {\r\n    root: {\r\n        minHeight: 'calc(100vh - 64px)',\r\n        flexGrow: 1,\r\n        overflow: 'hidden'\r\n    },\r\n    card: {\r\n        padding: \"1.5rem\",\r\n        textAlign: 'center'\r\n    },\r\n    input: {\r\n        margin: '14px 0px'\r\n    }\r\n}\r\nexport default class Imagecompressor extends React.Component {\r\n    classes = useStyles;\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            compressedLink: null,\r\n            originalImage: \"\",\r\n            originalLink: \"\",\r\n            clicked: false,\r\n            uploadImage: false,\r\n            snakOpen: false,\r\n            snakMessage: \"\",\r\n            maxSizeMB: 1,\r\n            maxWidthOrHeight: 1024,\r\n        };\r\n    }\r\n\r\n    handle = e => {\r\n        const imageFile = e.target.files[0];\r\n        const letThis = this;\r\n        let reader = new FileReader();\r\n        reader.onloadend = function (e) {\r\n            let image = new Image();\r\n            image.src = e.target.result;\r\n            image.onload = function (ev) {\r\n                letThis.setState({\r\n                    originalLink: URL.createObjectURL(imageFile),\r\n                    originalImage: imageFile,\r\n                    outputFileName: imageFile.name,\r\n                    uploadImage: true,\r\n                    height: image.naturalHeight,\r\n                    width: image.naturalWidth\r\n                });\r\n            };\r\n        }\r\n        reader.readAsDataURL(imageFile);\r\n    };\r\n\r\n    changeValue = e => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n\r\n    click = e => {\r\n        e.preventDefault();\r\n        const options = {\r\n            maxSizeMB: this.state.maxSizeMB === \"\" ? 1 : this.state.maxSizeMB,\r\n            maxWidthOrHeight: this.state.maxWidthOrHeight === \"\" ? 500 : this.state.maxWidthOrHeight,\r\n            useWebWorker: true\r\n        };\r\n        if (options.maxSizeMB >= this.state.originalImage.size / 1024) {\r\n            alert(\"Image is too small, can't be Compressed!\");\r\n            return 0;\r\n        }\r\n        let output;\r\n        imageCompression(this.state.originalImage, options).then(x => {\r\n            output = x;\r\n            const downloadLink = URL.createObjectURL(output);\r\n            const letThis = this;\r\n            let reader = new FileReader();\r\n            reader.onloadend = function (e) {\r\n                let image = new Image();\r\n                image.src = e.target.result;\r\n                image.onload = function (ev) {\r\n                    letThis.setState({\r\n                        compressedLink: downloadLink,\r\n                        comwidth: image.naturalWidth,\r\n                        comheight: image.naturalHeight,\r\n                        outputimageSize: e.target.result.length\r\n                    });\r\n                }\r\n            }\r\n            reader.readAsDataURL(x);\r\n        });\r\n        this.setState({ clicked: true });\r\n        return 1;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div style={this.classes.root}>\r\n                <Helmet>\r\n                    <title>Online image size reducer</title>\r\n                    <meta name=\"keywords\" content=\"online image size reducer, file size reducer,image resizer,image compresser, image file compresser\" />\r\n                    <meta name=\"description\" content=\"Image compressor used to reduce the file size online easily\" />\r\n                </Helmet>\r\n                <Container maxWidth=\"xl\">\r\n                    <SubNavBar\r\n                        pageTitle=\"Online image size reducer\"\r\n                        links={[{\r\n                            url: \"/files/\",\r\n                            urlName: \"Files\"\r\n                        }]}\r\n                        txtTitle=\"Online image compressor used to reduce the image file size  with aspect ratio online\"\r\n                    />\r\n                    <br />\r\n                    <div className=\"container\" data-v-14591542>\r\n                        <div className=\"text-light text-center\">\r\n                            <h1>Three Simple Steps</h1>\r\n                            <h3>1. Upload Image</h3>\r\n                            <h3>2. Click on Compress</h3>\r\n                            <h3>3. Download Compressed Image</h3>\r\n                        </div>\r\n                        <br />\r\n                        <Grid container spacing={3} style={{ justifyContent: 'center' }}>\r\n                            <Grid item xl={12} sm={6} md={6} lg={6}>\r\n                                <Card elevation={2} style={this.classes.card} >\r\n                                    <CardContent>\r\n                                        {this.state.uploadImage ? (\r\n                                            <> <img\r\n                                                alt=\"original placeholder\"\r\n                                                id=\"idsourceimage\"\r\n                                                src={this.state.originalLink}\r\n                                            />\r\n                                                <Typography variant=\"body1\" component=\"p\">\r\n                                                    File Size :   {\r\n                                                        (this.state.originalImage.size / 1024).toFixed(2)\r\n                                                        + \" KB\"}\r\n                                                </Typography>\r\n                                                <Typography variant=\"body1\" component=\"p\">\r\n                                                    width x Height  :   {this.state.width + \" x \"\r\n                                                        + this.state.height}\r\n                                                </Typography>\r\n                                            </>\r\n                                        ) : (\r\n                                            <div className=\"file-dropzone\" style={{ backgroundColor: 'aliceblue' }} data-v-14591542>\r\n                                                <input id=\"image\" type=\"file\" data-v-14591542 onChange={e => this.handle(e)}\r\n                                                    accept=\"image/gif, image/jpeg, image/png\"\r\n                                                />\r\n                                                <p className=\"has-text-centered has-text-3 is-vcentered\" data-v-14591542>\r\n                                                    <span className=\"is-3\" data-v-14591542>Drag and drop your file here or click here to upload.</span>\r\n                                                </p>\r\n                                            </div>\r\n                                        )}\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                            <Grid item xl={12} sm={6} md={6} lg={6}\r\n                                style={{\r\n                                    display: this.state.outputFileName ? 'block' : 'none',\r\n                                    padding: '0px 5rem'\r\n                                }}>\r\n                                <br />\r\n                                {\r\n                                    this.state.outputFileName ? (\r\n                                        <>  <Button\r\n                                            color=\"primary\"\r\n                                            variant=\"contained\"\r\n                                            onClick={e => {\r\n                                                this.setState({\r\n                                                    uploadImage: false,\r\n                                                    originalImage: null,\r\n                                                    outputFileName: null,\r\n                                                    compressedLink: null,\r\n                                                })\r\n                                            }\r\n                                            }\r\n                                        >\r\n                                            Reupload\r\n                                        </Button>\r\n                                            <br />\r\n                                            <br />\r\n                                            <Typography variant=\"body1\" component=\"h5\">\r\n                                                Compress options\r\n                                            </Typography>\r\n                                            <TextField style={this.classes.input}\r\n                                                label=\"Maximum Size in MB\"\r\n                                                name=\"maxSizeMB\"\r\n                                                onChange={this.changeValue}\r\n                                                value={this.state.maxSizeMB}\r\n                                            ></TextField>\r\n                                            <br />\r\n                                            <TextField style={this.classes.input}\r\n                                                label=\"Max width or Height\"\r\n                                                name=\"maxWidthOrHeight\"\r\n                                                onChange={this.changeValue}\r\n                                                value={this.state.maxWidthOrHeight}\r\n                                            ></TextField>\r\n                                            <br />\r\n                                            <br />\r\n                                            <Button\r\n                                                color=\"primary\"\r\n                                                variant=\"contained\"\r\n                                                onClick={e => this.click(e)}\r\n                                            >\r\n                                                Compress\r\n                                            </Button>\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                        </>\r\n                                    )}\r\n                                <br />\r\n                                <br />\r\n                                {\r\n                                    this.state.clicked ? (\r\n                                        <div className=\"d-flex justify-content-center\">\r\n                                            <Button\r\n                                                color=\"secondary\"\r\n                                                variant=\"outlined\"\r\n                                                onClick={e => {\r\n                                                    let a = document.createElement('a');\r\n                                                    a.href = this.state.compressedLink;\r\n                                                    a.download = this.state.outputFileName;\r\n                                                    a.click();\r\n                                                }}\r\n                                            >Download\r\n                                            </Button>\r\n                                        </div>\r\n                                    ) : (\r\n                                        <></>\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                            <Grid item xl={12} sm={6} md={6} lg={6}>\r\n                                <Card elevation={2} style={this.classes.card} >\r\n                                    {\r\n                                        this.state.comwidth && this.state.outputFileName ? <>\r\n                                            <img\r\n                                                alt=\"download placeholder\"\r\n                                                src={this.state.compressedLink}></img>\r\n                                            <Typography variant=\"body1\" component=\"p\">\r\n                                                File Size :   {(this.state.outputimageSize / 1024).toFixed(2) + \" KB\"}\r\n                                            </Typography>\r\n                                            <Typography variant=\"body1\" component=\"p\">\r\n                                                width x Height  :   {this.state.comwidth + \" x \"\r\n                                                    + this.state.comheight}\r\n                                            </Typography>\r\n                                        </> : <>\r\n                                            <InsertPhotoIcon style={{ fontSize: '185px', fill: '#009688' }} />\r\n                                        </>\r\n                                    }\r\n                                </Card>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                    <br />\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":""}